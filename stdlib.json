[{"schema_version":"1.3.1","id":"GO-2021-0067","modified":"2023-06-12T18:45:41Z","published":"2021-04-14T20:04:52Z","aliases":["CVE-2021-27919"],"summary":"Panic when opening archives in archive/zip","details":"Using Reader.Open on an archive containing a file with a path prefixed by \"../\" will cause a panic due to a stack overflow. If parsing user supplied archives, this may be used as a denial of service vector.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"1.16.0-0"},{"fixed":"1.16.1"}]}],"ecosystem_specific":{"imports":[{"path":"archive/zip","symbols":["toValidName"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/300489"},{"type":"FIX","url":"https://go.googlesource.com/go/+/cd3b4ca9f20fd14187ed4cdfdee1a02ea87e5cd8"},{"type":"REPORT","url":"https://go.dev/issue/44916"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/MfiLYjG-RAw/m/zzhWj5jPAQAJ"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2021-0067"}},{"schema_version":"1.3.1","id":"GO-2021-0069","modified":"2023-06-12T18:45:41Z","published":"2021-04-14T20:04:52Z","aliases":["CVE-2020-28362"],"summary":"Panic during division of very large numbers in math/big","details":"A number of math/big.Int methods can panic when provided large inputs due to a flawed division method.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"1.14.0-0"},{"fixed":"1.14.12"},{"introduced":"1.15.0-0"},{"fixed":"1.15.5"}]}],"ecosystem_specific":{"imports":[{"path":"math/big","symbols":["nat.divRecursiveStep"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/269657"},{"type":"FIX","url":"https://go.googlesource.com/go/+/1e1fa5903b760c6714ba17e50bf850b01f49135c"},{"type":"REPORT","url":"https://go.dev/issue/42552"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/NpBGTTmKzpM/m/fLguyiM2CAAJ"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2021-0069"}},{"schema_version":"1.3.1","id":"GO-2021-0142","modified":"2023-06-12T18:45:41Z","published":"2022-07-01T20:11:09Z","aliases":["CVE-2020-16845","GHSA-q6gq-997w-f55g"],"summary":"Unbounded read from invalid inputs in encoding/binary","details":"ReadUvarint and ReadVarint can read an unlimited number of bytes from invalid inputs.\n\nCertain invalid inputs to ReadUvarint or ReadVarint can cause these functions to read an unlimited number of bytes from the ByteReader parameter before returning an error. This can lead to processing more input than expected when the caller is reading directly from a network and depends on ReadUvarint or ReadVarint only consuming a small, bounded number of bytes, even from invalid inputs.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.13.15"},{"introduced":"1.14.0-0"},{"fixed":"1.14.7"}]}],"ecosystem_specific":{"imports":[{"path":"encoding/binary","symbols":["ReadUvarint","ReadVarint"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/247120"},{"type":"FIX","url":"https://go.googlesource.com/go/+/027d7241ce050d197e7fabea3d541ffbe3487258"},{"type":"REPORT","url":"https://go.dev/issue/40618"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/NyPIaucMgXo"}],"credits":[{"name":"Diederik Loerakker"},{"name":"Jonny Rhea"},{"name":"Raúl Kripalani"},{"name":"Preston Van Loon"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2021-0142"}},{"schema_version":"1.3.1","id":"GO-2021-0154","modified":"2023-06-12T18:45:41Z","published":"2022-05-25T21:11:41Z","aliases":["CVE-2014-7189"],"summary":"Man-in-the-middle attack with SessionTicketsDisabled in crypto/tls","details":"When SessionTicketsDisabled is enabled, crypto/tls allowed man-in-the-middle attackers to spoof clients via unspecified vectors.\n\nIf the server enables TLS client authentication using certificates (this is rare) and explicitly sets SessionTicketsDisabled to true in the tls.Config, then a malicious client can falsely assert ownership of any client certificate it wishes.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"1.1.0-0"},{"fixed":"1.3.2"}]}],"ecosystem_specific":{"imports":[{"path":"crypto/tls","symbols":["checkForResumption","decryptTicket"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/148080043"},{"type":"FIX","url":"https://go.googlesource.com/go/+/commit/64df53ed7f"},{"type":"REPORT","url":"https://go.dev/issue/53085"},{"type":"WEB","url":"https://groups.google.com/g/golang-nuts/c/eeOHNw_shwU/m/OHALUmroA5kJ"}],"credits":[{"name":"Go Team"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2021-0154"}},{"schema_version":"1.3.1","id":"GO-2021-0159","modified":"2023-06-12T18:45:41Z","published":"2022-01-05T21:39:14Z","aliases":["CVE-2015-5739","CVE-2015-5740","CVE-2015-5741"],"summary":"Request smuggling due to improper header parsing in net/http","details":"HTTP headers were not properly parsed, which allows remote attackers to conduct HTTP request smuggling attacks via a request that contains Content-Length and Transfer-Encoding header fields.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.4.3"}]}],"ecosystem_specific":{"imports":[{"path":"net/http","symbols":["CanonicalMIMEHeaderKey","body.readLocked","canonicalMIMEHeaderKey","chunkWriter.writeHeader","fixLength","fixTransferEncoding","readTransfer","transferWriter.shouldSendContentLength","validHeaderFieldByte"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/13148"},{"type":"FIX","url":"https://go.googlesource.com/go/+/26049f6f9171d1190f3bbe05ec304845cfe6399f"},{"type":"FIX","url":"https://go.dev/cl/11772"},{"type":"FIX","url":"https://go.dev/cl/11810"},{"type":"FIX","url":"https://go.dev/cl/12865"},{"type":"FIX","url":"https://go.googlesource.com/go/+/117ddcb83d7f42d6aa72241240af99ded81118e9"},{"type":"FIX","url":"https://go.googlesource.com/go/+/300d9a21583e7cf0149a778a0611e76ff7c6680f"},{"type":"FIX","url":"https://go.googlesource.com/go/+/c2db5f4ccc61ba7df96a747e268a277b802cbb87"},{"type":"REPORT","url":"https://go.dev/issue/12027"},{"type":"REPORT","url":"https://go.dev/issue/11930"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/iSIyW4lM4hY/m/ADuQR4DiDwAJ"}],"credits":[{"name":"Jed Denlea"},{"name":"Régis Leroy"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2021-0159"}},{"schema_version":"1.3.1","id":"GO-2021-0160","modified":"2023-06-12T18:45:41Z","published":"2022-01-05T15:31:16Z","aliases":["CVE-2015-8618"],"summary":"Incorrect calculation affecting RSA computations in math/big","details":"Int.Exp Montgomery mishandled carry propagation and produced an incorrect output, which makes it easier for attackers to obtain private RSA keys via unspecified vectors.\n\nThis issue can affect RSA computations in crypto/rsa, which is used by crypto/tls. TLS servers on 32-bit systems could plausibly leak their RSA private key due to this issue. Other protocol implementations that create many RSA signatures could also be impacted in the same way.\n\nSpecifically, incorrect results in one part of the RSA Chinese Remainder computation can cause the result to be incorrect in such a way that it leaks one of the primes. While RSA blinding should prevent an attacker from crafting specific inputs that trigger the bug, on 32-bit systems the bug can be expected to occur at random around one in 2^26 times. Thus collecting around 64 million signatures (of known data) from an affected server should be enough to extract the private key used.\n\nNote that on 64-bit systems, the frequency of the bug is so low (less than one in 2^50) that it would be very difficult to exploit.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"1.5.0-0"},{"fixed":"1.5.3"}]}],"ecosystem_specific":{"imports":[{"path":"math/big","symbols":["nat.expNNMontgomery","nat.montgomery"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/18491"},{"type":"FIX","url":"https://go.googlesource.com/go/+/1e066cad1ba23f4064545355b8737e4762dd6838"},{"type":"FIX","url":"https://go.googlesource.com/go/+/4306352182bf94f86f0cfc6a8b0ed461cbf1d82c"},{"type":"FIX","url":"https://go.dev/cl/17672"},{"type":"REPORT","url":"https://go.dev/issue/13515"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/MEATuOi_ei4"}],"credits":[{"name":"Nick Craig-Wood"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2021-0160"}},{"schema_version":"1.3.1","id":"GO-2021-0163","modified":"2023-06-12T18:45:41Z","published":"2022-01-05T22:41:50Z","aliases":["CVE-2016-3958"],"summary":"Privilege escalation on Windows via malicious DLL in syscall","details":"Untrusted search path vulnerability on Windows related to LoadLibrary allows local users to gain privileges via a malicious DLL in the current working directory.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.5.4"},{"introduced":"1.6.0-0"},{"fixed":"1.6.1"}]}],"ecosystem_specific":{"imports":[{"path":"syscall","symbols":["LoadLibrary"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/21428"},{"type":"FIX","url":"https://go.googlesource.com/go/+/6a0bb87bd0bf0fdf8ddbd35f77a75ebd412f61b0"},{"type":"REPORT","url":"https://go.dev/issue/14959"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/9eqIHqaWvck"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2021-0163"}},{"schema_version":"1.3.1","id":"GO-2021-0172","modified":"2023-06-12T18:45:41Z","published":"2022-02-15T23:56:14Z","aliases":["CVE-2017-1000098"],"summary":"Denial of service when parsing large forms in mime/multipart","details":"When parsing large multipart/form-data, an attacker can cause a HTTP server to open a large number of file descriptors. This may be used as a denial-of-service vector.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.6.4"},{"introduced":"1.7.0-0"},{"fixed":"1.7.4"}]}],"ecosystem_specific":{"imports":[{"path":"mime/multipart","symbols":["Reader.readForm"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/30410"},{"type":"FIX","url":"https://go.googlesource.com/go/+/7478ea5dba7ed02ddffd91c1d17ec8141f7cf184"},{"type":"REPORT","url":"https://go.dev/issue/16296"},{"type":"WEB","url":"https://groups.google.com/g/golang-dev/c/4NdLzS8sls8/m/uIz8QlnIBQAJ"}],"credits":[{"name":"Simon Rawet"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2021-0172"}},{"schema_version":"1.3.1","id":"GO-2021-0178","modified":"2023-06-12T18:45:41Z","published":"2022-01-07T20:35:00Z","aliases":["CVE-2017-15042"],"summary":"Cleartext transmission of credentials in net/smtp","details":"SMTP clients using net/smtp can use the PLAIN authentication scheme on network connections not secured with TLS, exposing passwords to man-in-the-middle SMTP servers.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"1.1.0-0"},{"fixed":"1.8.4"},{"introduced":"1.9.0-0"},{"fixed":"1.9.1"}]}],"ecosystem_specific":{"imports":[{"path":"net/smtp","symbols":["plainAuth.Start"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/68170"},{"type":"FIX","url":"https://go.googlesource.com/go/+/ec3b6131de8f9c9c25283260c95c616c74f6d790"},{"type":"REPORT","url":"https://go.dev/issue/22134"},{"type":"WEB","url":"https://groups.google.com/g/golang-dev/c/RinSE3EiJBI/m/kYL7zb07AgAJ"}],"credits":[{"name":"Stevie Johnstone"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2021-0178"}},{"schema_version":"1.3.1","id":"GO-2021-0223","modified":"2023-06-12T18:45:41Z","published":"2022-02-17T17:46:03Z","aliases":["CVE-2020-14039"],"summary":"Certificate verification error on Windows in crypto/x509","details":"On Windows, if VerifyOptions.Roots is nil, Certificate.Verify does not check the EKU requirements specified in VerifyOptions.KeyUsages. This may allow a certificate to be used for an unintended purpose.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.13.13"},{"introduced":"1.14.0-0"},{"fixed":"1.14.5"}]}],"ecosystem_specific":{"imports":[{"path":"crypto/x509","goos":["windows"],"symbols":["Certificate.systemVerify"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/242597"},{"type":"FIX","url":"https://go.googlesource.com/go/+/82175e699a2e2cd83d3aa34949e9b922d66d52f5"},{"type":"REPORT","url":"https://go.dev/issue/39360"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/XZNfaiwgt2w"}],"credits":[{"name":"Niall Newman"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2021-0223"}},{"schema_version":"1.3.1","id":"GO-2021-0224","modified":"2023-06-12T18:45:41Z","published":"2022-02-17T17:36:04Z","aliases":["CVE-2020-15586"],"summary":"Data race and crash in net/http","details":"HTTP servers where the Handler concurrently reads the request body and writes a response can encounter a data race and crash. The httputil.ReverseProxy Handler is affected.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.13.13"},{"introduced":"1.14.0-0"},{"fixed":"1.14.5"}]}],"ecosystem_specific":{"imports":[{"path":"net/http","symbols":["expectContinueReader.Read"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/242598"},{"type":"FIX","url":"https://go.googlesource.com/go/+/fa98f46741f818913a8c11b877520a548715131f"},{"type":"REPORT","url":"https://go.dev/issue/34902"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/XZNfaiwgt2w"}],"credits":[{"name":"Mikael Manukyan"},{"name":"Andrew Kutz"},{"name":"Dave McClure"},{"name":"Tim Downey"},{"name":"Clay Kauzlaric"},{"name":"Gabe Rosenhouse"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2021-0224"}},{"schema_version":"1.3.1","id":"GO-2021-0226","modified":"2023-06-12T18:45:41Z","published":"2022-01-13T03:44:58Z","aliases":["CVE-2020-24553"],"summary":"Cross-site scripting in net/http/cgi and net/http/fcgi","details":"When a Handler does not explicitly set the Content-Type header, the the package would default to “text/html”, which could cause a Cross-Site Scripting vulnerability if an attacker can control any part of the contents of a response.\n\nThe Content-Type header is now set based on the contents of the first Write using http.DetectContentType, which is consistent with the behavior of the net/http package.\n\nAlthough this protects some applications that validate the contents of uploaded files, not setting the Content-Type header explicitly on any attacker-controlled file is unsafe and should be avoided.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.14.8"},{"introduced":"1.15.0-0"},{"fixed":"1.15.1"}]}],"ecosystem_specific":{"imports":[{"path":"net/http/cgi","symbols":["response.Write","response.WriteHeader","response.writeCGIHeader"]},{"path":"net/http/fcgi","symbols":["response.Write","response.WriteHeader","response.writeCGIHeader"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/252179"},{"type":"FIX","url":"https://go.googlesource.com/go/+/4f5cd0c0331943c7ec72df3b827d972584f77833"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/8wqlSbkLdPs"},{"type":"REPORT","url":"https://go.dev/issue/40928"}],"credits":[{"name":"RedTeam Pentesting GmbH"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2021-0226"}},{"schema_version":"1.3.1","id":"GO-2021-0234","modified":"2023-06-12T18:45:41Z","published":"2022-02-17T17:34:24Z","aliases":["CVE-2021-27918"],"summary":"Infinite loop when decoding inputs in encoding/xml","details":"The Decode, DecodeElement, and Skip methods of an xml.Decoder provided by xml.NewTokenDecoder may enter an infinite loop when operating on a custom xml.TokenReader which returns an EOF in the middle of an open XML element.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.15.9"},{"introduced":"1.16.0-0"},{"fixed":"1.16.1"}]}],"ecosystem_specific":{"imports":[{"path":"encoding/xml","symbols":["Decoder.Token"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/300391"},{"type":"FIX","url":"https://go.googlesource.com/go/+/d0b79e3513a29628f3599dc8860666b6eed75372"},{"type":"REPORT","url":"https://go.dev/issue/44913"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/MfiLYjG-RAw"}],"credits":[{"name":"Sam Whited"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2021-0234"}},{"schema_version":"1.3.1","id":"GO-2021-0235","modified":"2023-06-12T18:45:41Z","published":"2022-02-17T17:34:14Z","aliases":["CVE-2021-3114"],"summary":"Incorrect operations on the P-224 curve in crypto/elliptic","details":"The P224() Curve implementation can in rare circumstances generate incorrect outputs, including returning invalid points from ScalarMult.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.14.14"},{"introduced":"1.15.0-0"},{"fixed":"1.15.7"}]}],"ecosystem_specific":{"imports":[{"path":"crypto/elliptic","symbols":["p224Contract"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/284779"},{"type":"FIX","url":"https://go.googlesource.com/go/+/d95ca9138026cbe40e0857d76a81a16d03230871"},{"type":"REPORT","url":"https://go.dev/issue/43786"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/mperVMGa98w"}],"credits":[{"name":"The elliptic-curve-differential-fuzzer project running on OSS-Fuzz"},{"name":"Philippe Antoine (Catena cyber)"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2021-0235"}},{"schema_version":"1.3.1","id":"GO-2021-0239","modified":"2023-06-12T18:45:41Z","published":"2022-02-17T17:33:35Z","aliases":["CVE-2021-33195"],"summary":"Improper sanitization when resolving values from DNS in net","details":"The LookupCNAME, LookupSRV, LookupMX, LookupNS, and LookupAddr functions and their respective methods on the Resolver type may return arbitrary values retrieved from DNS which do not follow the established RFC 1035 rules for domain names. If these names are used without further sanitization, for instance unsafely included in HTML, they may allow for injection of unexpected content. Note that LookupTXT may still return arbitrary values that could require sanitization before further use.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.15.13"},{"introduced":"1.16.0-0"},{"fixed":"1.16.5"}]}],"ecosystem_specific":{"imports":[{"path":"net","symbols":["Resolver.LookupAddr","Resolver.LookupCNAME","Resolver.LookupMX","Resolver.LookupNS","Resolver.LookupSRV"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/320949"},{"type":"FIX","url":"https://go.googlesource.com/go/+/c89f1224a544cde464fcb86e78ebb0cc97eedba2"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/RgCMkAEQjSI"},{"type":"REPORT","url":"https://go.dev/issue/46241"}],"credits":[{"name":"Philipp Jeitner"},{"name":"Haya Shulman from Fraunhofer SIT"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2021-0239"}},{"schema_version":"1.3.1","id":"GO-2021-0240","modified":"2023-06-12T18:45:41Z","published":"2022-02-17T17:33:25Z","aliases":["CVE-2021-33196"],"summary":"Panic when reading certain archives in archive/zip","details":"NewReader and OpenReader can cause a panic or an unrecoverable fatal error when reading an archive that claims to contain a large number of files, regardless of its actual size.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.15.13"},{"introduced":"1.16.0-0"},{"fixed":"1.16.5"}]}],"ecosystem_specific":{"imports":[{"path":"archive/zip","symbols":["Reader.init"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/318909"},{"type":"FIX","url":"https://go.googlesource.com/go/+/74242baa4136c7a9132a8ccd9881354442788c8c"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/RgCMkAEQjSI"},{"type":"REPORT","url":"https://go.dev/issue/46242"}],"credits":[{"name":"OSS-Fuzz (discovery)"},{"name":"Emmanuel Odeke (reporter)"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2021-0240"}},{"schema_version":"1.3.1","id":"GO-2021-0241","modified":"2023-06-12T18:45:41Z","published":"2022-02-17T17:33:16Z","aliases":["CVE-2021-33197"],"summary":"Attacker can drop certain headers in net/http/httputil","details":"ReverseProxy can be made to forward certain hop-by-hop headers, including Connection. If the target of the ReverseProxy is itself a reverse proxy, this lets an attacker drop arbitrary headers, including those set by the ReverseProxy.Director.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.15.13"},{"introduced":"1.16.0-0"},{"fixed":"1.16.5"}]}],"ecosystem_specific":{"imports":[{"path":"net/http/httputil","symbols":["ReverseProxy.ServeHTTP"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/321929"},{"type":"FIX","url":"https://go.googlesource.com/go/+/950fa11c4cb01a145bb07eeb167d90a1846061b3"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/RgCMkAEQjSI"},{"type":"REPORT","url":"https://go.dev/issue/46313"}],"credits":[{"name":"Mattias Grenfeldt (https://grenfeldt.dev)"},{"name":"Asta Olofsson"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2021-0241"}},{"schema_version":"1.3.1","id":"GO-2021-0242","modified":"2023-06-12T18:45:41Z","published":"2022-02-17T17:33:07Z","aliases":["CVE-2021-33198"],"summary":"Panic on inputs with large exponents in math/big","details":"Rat.SetString and Rat.UnmarshalText may cause a panic or an unrecoverable fatal error if passed inputs with very large exponents.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.15.13"},{"introduced":"1.16.0-0"},{"fixed":"1.16.5"}]}],"ecosystem_specific":{"imports":[{"path":"math/big","symbols":["Rat.SetString"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/316149"},{"type":"FIX","url":"https://go.googlesource.com/go/+/6c591f79b0b5327549bd4e94970f7a279efb4ab0"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/RgCMkAEQjSI"},{"type":"REPORT","url":"https://go.dev/issue/45910"}],"credits":[{"name":"The OSS-Fuzz project (discovery)"},{"name":"Emmanuel Odeke (reporter)"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2021-0242"}},{"schema_version":"1.3.1","id":"GO-2021-0243","modified":"2023-06-12T18:45:41Z","published":"2022-02-17T17:32:57Z","aliases":["CVE-2021-34558"],"summary":"Panic on certain certificates in crypto/tls","details":"crypto/tls clients can panic when provided a certificate of the wrong type for the negotiated parameters. net/http clients performing HTTPS requests are also affected.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.15.14"},{"introduced":"1.16.0-0"},{"fixed":"1.16.6"}]}],"ecosystem_specific":{"imports":[{"path":"crypto/tls","symbols":["rsaKeyAgreement.generateClientKeyExchange"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/334031"},{"type":"FIX","url":"https://go.googlesource.com/go/+/a98589711da5e9d935e8d690cfca92892e86d557"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/n9FxMelZGAQ"},{"type":"REPORT","url":"https://go.dev/issue/47143"}],"credits":[{"name":"Imre Rad"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2021-0243"}},{"schema_version":"1.3.1","id":"GO-2021-0245","modified":"2023-06-12T18:45:41Z","published":"2022-02-17T17:32:24Z","aliases":["CVE-2021-36221"],"summary":"Panic in ReverseProxy in net/http/httputil","details":"ReverseProxy can panic after encountering a problem copying a proxied response body.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.15.15"},{"introduced":"1.16.0-0"},{"fixed":"1.16.7"}]}],"ecosystem_specific":{"imports":[{"path":"net/http/httputil","symbols":["ReverseProxy.ServeHTTP"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/333191"},{"type":"FIX","url":"https://go.googlesource.com/go/+/b7a85e0003cedb1b48a1fd3ae5b746ec6330102e"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/uHACNfXAZqk"},{"type":"REPORT","url":"https://go.dev/issue/46866"}],"credits":[{"name":"Andrew Crump"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2021-0245"}},{"schema_version":"1.3.1","id":"GO-2021-0263","modified":"2023-06-12T18:45:41Z","published":"2022-01-13T03:45:03Z","aliases":["CVE-2021-41771"],"summary":"Panic on invalid symbol tables in debug/macho","details":"Calling File.ImportedSymbols on a loaded file which contains an invalid dynamic symbol table command can cause a panic, in particular if the encoded number of undefined symbols is larger than the number of symbols in the symbol table.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.16.10"},{"introduced":"1.17.0-0"},{"fixed":"1.17.3"}]}],"ecosystem_specific":{"imports":[{"path":"debug/macho","symbols":["NewFile"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/367075"},{"type":"FIX","url":"https://go.googlesource.com/go/+/61536ec03063b4951163bd09609c86d82631fa27"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/0fM21h43arc"},{"type":"REPORT","url":"https://go.dev/issue/48990"}],"credits":[{"name":"Burak Çarıkçı - Yunus Yıldırım (CT-Zer0 Crypttech)"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2021-0263"}},{"schema_version":"1.3.1","id":"GO-2021-0264","modified":"2023-06-12T18:45:41Z","published":"2022-01-13T20:54:43Z","aliases":["CVE-2021-41772"],"summary":"Panic when opening certain archives in archive/zip","details":"Previously, opening a zip with (*Reader).Open could result in a panic if the zip contained a file whose name was exclusively made up of slash characters or \"..\" path elements.\n\nOpen could also panic if passed the empty string directly as an argument.\n\nNow, any files in the zip whose name could not be made valid for fs.FS.Open will be skipped, and no longer added to the fs.FS file list, although they are still accessible through (*Reader).File.\n\nNote that it was already the case that a file could be accessible from (*Reader).Open with a name different from the one in (*Reader).File, as the former is the cleaned name, while the latter is the original one.\n\nFinally, the actual panic site was made robust as a defense-in-depth measure.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.16.10"},{"introduced":"1.17.0-0"},{"fixed":"1.17.3"}]}],"ecosystem_specific":{"imports":[{"path":"archive/zip","symbols":["Reader.Open","split"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/349770"},{"type":"FIX","url":"https://go.googlesource.com/go/+/b24687394b55a93449e2be4e6892ead58ea9a10f"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/0fM21h43arc"},{"type":"REPORT","url":"https://go.dev/issue/48085"}],"credits":[{"name":"Colin Arnott (SiteHost)"},{"name":"Noah Santschi-Cooney (Sourcegraph Code Intelligence Team)"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2021-0264"}},{"schema_version":"1.3.1","id":"GO-2021-0317","modified":"2023-06-12T18:45:41Z","published":"2022-05-23T22:15:42Z","aliases":["CVE-2022-23772"],"summary":"Uncontrolled memory consumption in math/big","details":"Rat.SetString had an overflow issue that can lead to uncontrolled memory consumption.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.16.14"},{"introduced":"1.17.0-0"},{"fixed":"1.17.7"}]}],"ecosystem_specific":{"imports":[{"path":"math/big","symbols":["Rat.SetString"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/379537"},{"type":"FIX","url":"https://go.googlesource.com/go/+/ad345c265916bbf6c646865e4642eafce6d39e78"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/SUsQn0aSgPQ"},{"type":"REPORT","url":"https://go.dev/issue/50699"}],"credits":[{"name":"Emmanuel Odeke"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2021-0317"}},{"schema_version":"1.3.1","id":"GO-2021-0319","modified":"2023-06-12T18:45:41Z","published":"2022-05-23T22:15:21Z","aliases":["CVE-2022-23806"],"summary":"Incorrect computation for some invalid field elements in crypto/elliptic","details":"Some big.Int values that are not valid field elements (negative or overflowing) might cause Curve.IsOnCurve to incorrectly return true. Operating on those values may cause a panic or an invalid curve operation. Note that Unmarshal will never return such values.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.16.14"},{"introduced":"1.17.0-0"},{"fixed":"1.17.7"}]}],"ecosystem_specific":{"imports":[{"path":"crypto/elliptic","symbols":["CurveParams.IsOnCurve","p384PointFromAffine","p521PointFromAffine"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/382455"},{"type":"FIX","url":"https://go.googlesource.com/go/+/7f9494c277a471f6f47f4af3036285c0b1419816"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/SUsQn0aSgPQ"},{"type":"REPORT","url":"https://go.dev/issue/50974"}],"credits":[{"name":"Guido Vranken"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2021-0319"}},{"schema_version":"1.3.1","id":"GO-2021-0347","modified":"2023-06-12T18:45:41Z","published":"2022-05-23T22:15:47Z","aliases":["CVE-2022-24921"],"summary":"Stack exhaustion when compiling deeply nested expressions in regexp","details":"On 64-bit platforms, an extremely deeply nested expression can cause regexp.Compile to cause goroutine stack exhaustion, forcing the program to exit. Note this applies to very large expressions, on the order of 2MB.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.16.15"},{"introduced":"1.17.0-0"},{"fixed":"1.17.8"}]}],"ecosystem_specific":{"imports":[{"path":"regexp","symbols":["regexp.Compile"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/384616"},{"type":"FIX","url":"https://go.googlesource.com/go/+/452f24ae94f38afa3704d4361d91d51218405c0a"},{"type":"REPORT","url":"https://go.dev/issue/51112"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/RP1hfrBYVuk"}],"credits":[{"name":"Juho Nurminen"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2021-0347"}},{"schema_version":"1.3.1","id":"GO-2022-0166","modified":"2023-06-12T18:45:41Z","published":"2022-05-24T22:06:33Z","aliases":["CVE-2016-3959"],"summary":"Denial of service due to unchecked parameters in crypto/dsa","details":"The Verify function in crypto/dsa passed certain parameters unchecked to the underlying big integer library, possibly leading to extremely long-running computations, which in turn makes Go programs vulnerable to remote denial of service attacks. Programs using HTTPS client certificates or the Go SSH server libraries are both exposed to this vulnerability.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.5.4"},{"introduced":"1.6.0-0"},{"fixed":"1.6.1"}]}],"ecosystem_specific":{"imports":[{"path":"crypto/dsa","symbols":["Verify"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/21533"},{"type":"FIX","url":"https://go.googlesource.com/go/+/eb876dd83cb8413335d64e50aae5d38337d1ebb4"},{"type":"REPORT","url":"https://go.dev/issue/15184"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/9eqIHqaWvck"}],"credits":[{"name":"David Wong"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0166"}},{"schema_version":"1.3.1","id":"GO-2022-0171","modified":"2023-06-12T18:45:41Z","published":"2022-05-24T20:17:59Z","aliases":["CVE-2017-1000097"],"summary":"Mishandled trust preferences for root certificates on Darwin in crypto/x509","details":"On Darwin, user's trust preferences for root certificates were not honored. If the user had a root certificate loaded in their Keychain that was explicitly not trusted, a Go program would still verify a connection using that root certificate.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.6.4"},{"introduced":"1.7.0-0"},{"fixed":"1.7.4"}]}],"ecosystem_specific":{"imports":[{"path":"crypto/x509","goos":["darwin"],"symbols":["FetchPEMRoots","execSecurityRoots"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/33721"},{"type":"FIX","url":"https://go.googlesource.com/go/+/7e5b2e0ec144d5f5b2923a7d5db0b9143f79a35a"},{"type":"REPORT","url":"https://go.dev/issue/18141"},{"type":"WEB","url":"https://groups.google.com/g/golang-dev/c/4NdLzS8sls8/m/uIz8QlnIBQAJ"}],"credits":[{"name":"Xy Ziemba"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0171"}},{"schema_version":"1.3.1","id":"GO-2022-0187","modified":"2023-06-12T18:45:41Z","published":"2022-07-01T20:11:15Z","aliases":["CVE-2017-8932"],"summary":"Incorrect computation for P-256 curves in crypto/elliptic","details":"The ScalarMult implementation of curve P-256 for amd64 architectures generates incorrect results for certain specific input points. An adaptive attack can progressively extract the scalar input to ScalarMult by submitting crafted points and observing failures to derive correct output. This leads to a full key recovery attack against static ECDH, as used in popular JWT libraries.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"1.6.0-0"},{"fixed":"1.7.6"},{"introduced":"1.8.0-0"},{"fixed":"1.8.2"}]}],"ecosystem_specific":{"imports":[{"path":"crypto/elliptic","goarch":["amd64"],"symbols":["p256SubInternal"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/41070"},{"type":"FIX","url":"https://go.googlesource.com/go/+/9294fa2749ffee7edbbb817a0ef9fe633136fa9c"},{"type":"REPORT","url":"https://go.dev/issue/20040"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/B5ww0iFt1_Q/m/TgUFJV14BgAJ"}],"credits":[{"name":"Vlad Krasnov"},{"name":"Filippo Valsorda at Cloudflare"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0187"}},{"schema_version":"1.3.1","id":"GO-2022-0191","modified":"2023-06-12T18:45:41Z","published":"2022-07-15T23:03:26Z","aliases":["CVE-2018-16875"],"summary":"Denial of service in chain verification in crypto/x509","details":"The crypto/x509 package does not limit the amount of work performed for each chain verification, which might allow attackers to craft pathological inputs leading to a CPU denial of service. Go TLS servers accepting client certificates and TLS clients verifying certificates are affected.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.10.6"},{"introduced":"1.11.0-0"},{"fixed":"1.11.3"}]}],"ecosystem_specific":{"imports":[{"path":"crypto/x509","symbols":["CertPool.findVerifiedParents","Certificate.buildChains"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/154105"},{"type":"FIX","url":"https://go.googlesource.com/go/+/770130659b6fb2acf271476579a3644e093dda7f"},{"type":"REPORT","url":"https://go.dev/issue/29233"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/Kw31K8G7Fi0"}],"credits":[{"name":"Netflix"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0191"}},{"schema_version":"1.3.1","id":"GO-2022-0211","modified":"2023-06-12T18:45:41Z","published":"2022-07-01T20:15:30Z","aliases":["CVE-2019-14809"],"summary":"Incorrect parsing validation in net/url","details":"The url.Parse function accepts URLs with malformed hosts, such that the Host field can have arbitrary suffixes that appear in neither Hostname() nor Port(), allowing authorization bypasses in certain applications.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.11.13"},{"introduced":"1.12.0-0"},{"fixed":"1.12.8"}]}],"ecosystem_specific":{"imports":[{"path":"net/url","symbols":["URL.Hostname","URL.Port","parseHost"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/189258"},{"type":"FIX","url":"https://go.googlesource.com/go/+/61bb56ad63992a3199acc55b2537c8355ef887b6"},{"type":"REPORT","url":"https://go.dev/issue/29098"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/65QixT3tcmg"}],"credits":[{"name":"Julian Hector"},{"name":"Nikolai Krein from Cure53"},{"name":"Adi Cohen (adico.me)"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0211"}},{"schema_version":"1.3.1","id":"GO-2022-0212","modified":"2023-06-12T18:45:41Z","published":"2022-05-23T22:46:20Z","aliases":["CVE-2019-16276"],"summary":"Request smuggling due to accepting invalid headers in net/http","details":"net/http (through net/textproto) used to accept and normalize invalid HTTP/1.1 headers with a space before the colon, in violation of RFC 7230.\n\nIf a Go server is used behind an uncommon reverse proxy that accepts and forwards but doesn't normalize such invalid headers, the reverse proxy and the server can interpret the headers differently. This can lead to filter bypasses or request smuggling, the latter if requests from separate clients are multiplexed onto the same upstream connection by the proxy. Such invalid headers are now rejected by Go servers, and passed without normalization to Go client applications.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.12.10"},{"introduced":"1.13.0-0"},{"fixed":"1.13.1"}]}],"ecosystem_specific":{"imports":[{"path":"net/textproto","symbols":["Reader.ReadMimeHeader"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/197503"},{"type":"FIX","url":"https://go.googlesource.com/go/+/41b1f88efab9d263408448bf139659119002ea50"},{"type":"REPORT","url":"https://go.dev/issue/34540"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/cszieYyuL9Q/m/g4Z7pKaqAgAJ"}],"credits":[{"name":"Andrew Stucki (99designs.com)"},{"name":"Adam Scarr (99designs.com)"},{"name":"Jan Masarik (masarik.sh)"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0212"}},{"schema_version":"1.3.1","id":"GO-2022-0213","modified":"2023-06-12T18:45:41Z","published":"2022-05-24T20:14:11Z","aliases":["CVE-2019-17596"],"summary":"Panic on invalid DSA public keys in crypto/dsa","details":"Invalid DSA public keys can cause a panic in dsa.Verify. In particular, using crypto/x509.Verify on a crafted X.509 certificate chain can lead to a panic, even if the certificates don't chain to a trusted root. The chain can be delivered via a crypto/tls connection to a client, or to a server that accepts and verifies client certificates. net/http clients can be made to crash by an HTTPS server, while net/http servers that accept client certificates will recover the panic and are unaffected.\n\nMoreover, an application might crash invoking crypto/x509.(*CertificateRequest).CheckSignature on an X.509 certificate request, parsing a golang.org/x/crypto/openpgp Entity, or during a golang.org/x/crypto/otr conversation. Finally, a golang.org/x/crypto/ssh client can panic due to a malformed host key, while a server could panic if either PublicKeyCallback accepts a malformed public key, or if IsUserAuthority accepts a certificate with a malformed public key.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.12.11"},{"introduced":"1.13.0-0"},{"fixed":"1.13.2"}]}],"ecosystem_specific":{"imports":[{"path":"crypto/dsa","symbols":["Verify"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/205441"},{"type":"FIX","url":"https://go.googlesource.com/go/+/552987fdbf4c2bc9641016fd323c3ae5d3a0d9a3"},{"type":"REPORT","url":"https://go.dev/issue/34960"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/lVEm7llp0w0/m/VbafyRkgCgAJ"}],"credits":[{"name":"Daniel M"},{"name":"ragona"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0213"}},{"schema_version":"1.3.1","id":"GO-2022-0217","modified":"2023-06-12T18:45:41Z","published":"2022-05-24T15:21:01Z","aliases":["CVE-2019-6486"],"summary":"Denial of service affecting P-521 and P-384 curves in crypto/elliptic","details":"A DoS vulnerability in the crypto/elliptic implementations of the P-521 and P-384 elliptic curves may let an attacker craft inputs that consume excessive amounts of CPU.\n\nThese inputs might be delivered via TLS handshakes, X.509 certificates, JWT tokens, ECDH shares or ECDSA signatures. In some cases, if an ECDH private key is reused more than once, the attack can also lead to key recovery.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.10.8"},{"introduced":"1.11.0-0"},{"fixed":"1.11.5"}]}],"ecosystem_specific":{"imports":[{"path":"crypto/elliptic","symbols":["curve.doubleJacobian"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/159218"},{"type":"FIX","url":"https://go.googlesource.com/go/+/193c16a3648b8670a762e925b6ac6e074f468a20"},{"type":"REPORT","url":"https://go.dev/issue/29903"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/mVeX35iXuSw"}],"credits":[{"name":"Wycheproof Project"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0217"}},{"schema_version":"1.3.1","id":"GO-2022-0220","modified":"2023-06-12T18:45:41Z","published":"2022-05-25T18:01:46Z","aliases":["CVE-2019-9634"],"summary":"DLL injection on Windows in runtime and syscall","details":"Go on Windows misused certain LoadLibrary functionality, leading to DLL injection.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.11.10"},{"introduced":"1.12.0-0"},{"fixed":"1.12.2"}]}],"ecosystem_specific":{"imports":[{"path":"runtime","goos":["windows"],"symbols":["loadOptionalSyscalls","osinit","syscall_loadsystemlibrary"]},{"path":"syscall","goos":["windows"],"symbols":["LoadDLL"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/165798"},{"type":"FIX","url":"https://go.googlesource.com/go/+/9b6e9f0c8c66355c0f0575d808b32f52c8c6d21c"},{"type":"REPORT","url":"https://go.dev/issue/28978"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/z9eTD34GEIs/m/Z_XmhTrVAwAJ"}],"credits":[{"name":"Samuel Cochran"},{"name":"Jason Donenfeld"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0220"}},{"schema_version":"1.3.1","id":"GO-2022-0229","modified":"2023-06-12T18:45:41Z","published":"2022-07-06T18:23:48Z","aliases":["CVE-2020-7919","GHSA-cjjc-xp8v-855w"],"summary":"Panic in certificate parsing in crypto/x509 and golang.org/x/crypto/cryptobyte","details":"On 32-bit architectures, a malformed input to crypto/x509 or the ASN.1 parsing functions of golang.org/x/crypto/cryptobyte can lead to a panic.\n\nThe malformed certificate can be delivered via a crypto/tls connection to a client, or to a server that accepts client certificates. net/http clients can be made to crash by an HTTPS server, while net/http servers that accept client certificates will recover the panic and are unaffected.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.12.16"},{"introduced":"1.13.0-0"},{"fixed":"1.13.7"}]}],"ecosystem_specific":{"imports":[{"path":"crypto/x509"}]}},{"package":{"name":"golang.org/x/crypto","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"0.0.0-20200124225646-8b5121be2f68"}]}],"ecosystem_specific":{"imports":[{"path":"golang.org/x/crypto/cryptobyte"}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/216680"},{"type":"FIX","url":"https://go.googlesource.com/go/+/b13ce14c4a6aa59b7b041ad2b6eed2d23e15b574"},{"type":"FIX","url":"https://go.dev/cl/216677"},{"type":"REPORT","url":"https://go.dev/issue/36837"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/Hsw4mHYc470"}],"credits":[{"name":"Project Wycheproof"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0229"}},{"schema_version":"1.3.1","id":"GO-2022-0236","modified":"2023-06-12T18:45:41Z","published":"2022-07-15T23:04:18Z","aliases":["CVE-2021-31525","GHSA-h86h-8ppg-mxmh"],"summary":"Panic due to large headers in net/http and golang.org/x/net/http/httpguts","details":"A malicious HTTP server or client can cause the net/http client or server to panic.\n\nReadRequest and ReadResponse can hit an unrecoverable panic when reading a very large header (over 7MB on 64-bit architectures, or over 4MB on 32-bit ones). Transport and Client are vulnerable and the program can be made to crash by a malicious server. Server is not vulnerable by default, but can be if the default max header of 1MB is overridden by setting Server.MaxHeaderBytes to a higher value, in which case the program can be made to crash by a malicious client.\n\nThis also affects golang.org/x/net/http2/h2c and HeaderValuesContainsToken in golang.org/x/net/http/httpguts.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.15.12"},{"introduced":"1.16.0-0"},{"fixed":"1.16.4"}]}],"ecosystem_specific":{"imports":[{"path":"net/http","symbols":["http2clientStream.writeRequest","http2isConnectionCloseRequest","isProtocolSwitchHeader","shouldClose"]}]}},{"package":{"name":"golang.org/x/net","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"0.0.0-20210428140749-89ef3d95e781"}]}],"ecosystem_specific":{"imports":[{"path":"golang.org/x/net/http/httpguts","symbols":["HeaderValuesContainsToken","headerValueContainsToken"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/313069"},{"type":"FIX","url":"https://go.googlesource.com/net/+/89ef3d95e781148a0951956029c92a211477f7f9"},{"type":"REPORT","url":"https://go.dev/issue/45710"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/cu9SP4eSXMc"}],"credits":[{"name":"Guido Vranken"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0236"}},{"schema_version":"1.3.1","id":"GO-2022-0273","modified":"2023-06-12T18:45:41Z","published":"2022-05-18T18:23:31Z","aliases":["CVE-2021-39293"],"summary":"Panic due to crafted inputs in archive/zip","details":"The NewReader and OpenReader functions in archive/zip can cause a panic or an unrecoverable fatal error when reading an archive that claims to contain a large number of files, regardless of its actual size. This is caused by an incomplete fix for CVE-2021-33196.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.16.8"},{"introduced":"1.17.0-0"},{"fixed":"1.17.1"}]}],"ecosystem_specific":{"imports":[{"path":"archive/zip","symbols":["NewReader","OpenReader"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/343434"},{"type":"FIX","url":"https://go.googlesource.com/go/+/bacbc33439b124ffd7392c91a5f5d96eca8c0c0b"},{"type":"REPORT","url":"https://go.dev/issue/47801"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/dx9d7IOseHw"}],"credits":[{"name":"OSS-Fuzz Project"},{"name":"Emmanuel Odeke"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0273"}},{"schema_version":"1.3.1","id":"GO-2022-0288","modified":"2023-06-12T18:45:41Z","published":"2022-07-15T23:08:33Z","aliases":["CVE-2021-44716","GHSA-vc3p-29h2-gpcp"],"summary":"Unbounded memory growth in net/http and golang.org/x/net/http2","details":"An attacker can cause unbounded memory growth in servers accepting HTTP/2 requests.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.16.12"},{"introduced":"1.17.0-0"},{"fixed":"1.17.5"}]}],"ecosystem_specific":{"imports":[{"path":"net/http","symbols":["http2serverConn.canonicalHeader"]}]}},{"package":{"name":"golang.org/x/net","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"0.0.0-20211209124913-491a49abca63"}]}],"ecosystem_specific":{"imports":[{"path":"golang.org/x/net/http2","symbols":["Server.ServeConn","serverConn.canonicalHeader"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/369794"},{"type":"REPORT","url":"https://go.dev/issue/50058"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/hcmEScgc00k"}],"credits":[{"name":"murakmii"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0288"}},{"schema_version":"1.3.1","id":"GO-2022-0289","modified":"2023-06-12T18:45:41Z","published":"2022-05-18T18:23:23Z","aliases":["CVE-2021-44717"],"summary":"Misdirected I/O in syscall","details":"When a Go program running on a Unix system is out of file descriptors and calls syscall.ForkExec (including indirectly by using the os/exec package), syscall.ForkExec can close file descriptor 0 as it fails. If this happens (or can be provoked) repeatedly, it can result in misdirected I/O such as writing network traffic intended for one connection to a different connection, or content intended for one file to a different one.\n\nFor users who cannot immediately update to the new release, the bug can be mitigated by raising the per-process file descriptor limit.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.16.12"},{"introduced":"1.17.0-0"},{"fixed":"1.17.5"}]}],"ecosystem_specific":{"imports":[{"path":"syscall","symbols":["ForkExec"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/370576"},{"type":"FIX","url":"https://go.googlesource.com/go/+/a76511f3a40ea69ee4f5cd86e735e1c8a84f0aa2"},{"type":"REPORT","url":"https://go.dev/issue/50057"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/hcmEScgc00k"},{"type":"FIX","url":"https://go.dev/cl/370577"},{"type":"FIX","url":"https://go.dev/cl/370795"}],"credits":[{"name":"Tomasz Maczukin"},{"name":"Kamil Trzciński of GitLab"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0289"}},{"schema_version":"1.3.1","id":"GO-2022-0433","modified":"2023-06-12T18:45:41Z","published":"2022-05-20T21:17:25Z","aliases":["CVE-2022-24675"],"summary":"Stack overflow from a large amount of PEM data in encoding/pem","details":"encoding/pem in Go before 1.17.9 and 1.18.x before 1.18.1 has a Decode stack overflow via a large amount of PEM data.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.17.9"},{"introduced":"1.18.0-0"},{"fixed":"1.18.1"}]}],"ecosystem_specific":{"imports":[{"path":"encoding/pem","symbols":["Decode"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/399820"},{"type":"FIX","url":"https://go.googlesource.com/go/+/45c3387d777caf28f4b992ad9a6216e3085bb8fe"},{"type":"REPORT","url":"https://go.dev/issue/51853"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/oecdBNLOml8"}],"credits":[{"name":"Juho Nurminen of Mattermost"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0433"}},{"schema_version":"1.3.1","id":"GO-2022-0434","modified":"2023-06-12T18:45:41Z","published":"2022-05-23T21:59:00Z","aliases":["CVE-2022-27536"],"summary":"Panic during certificate parsing on Darwin in crypto/x509","details":"Verifying certificate chains containing certificates which are not compliant with RFC 5280 causes Certificate.Verify to panic on macOS.\n\nThese chains can be delivered through TLS and can cause a crypto/tls or net/http client to crash.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"1.18.0-0"},{"fixed":"1.18.1"}]}],"ecosystem_specific":{"imports":[{"path":"crypto/x509","goos":["darwin"],"symbols":["Certificate.Verify"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/393655"},{"type":"FIX","url":"https://go.googlesource.com/go/+/0fca8a8f25cf4636fd980e72ba0bded4230922de"},{"type":"REPORT","url":"https://go.dev/issue/51759"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/oecdBNLOml8"}],"credits":[{"name":"Tailscale"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0434"}},{"schema_version":"1.3.1","id":"GO-2022-0435","modified":"2023-06-12T18:45:41Z","published":"2022-05-20T21:17:46Z","aliases":["CVE-2022-28327"],"summary":"Panic due to large inputs affecting P-256 curves in crypto/elliptic","details":"A crafted scalar input longer than 32 bytes can cause P256().ScalarMult or P256().ScalarBaseMult to panic. Indirect uses through crypto/ecdsa and crypto/tls are unaffected. amd64, arm64, ppc64le, and s390x are unaffected.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.17.9"},{"introduced":"1.18.0-0"},{"fixed":"1.18.1"}]}],"ecosystem_specific":{"imports":[{"path":"crypto/elliptic","symbols":["CurveParams.ScalarBaseMult","CurveParams.ScalarMult","p256Curve.CombinedMult","p256Curve.ScalarBaseMult","p256Curve.ScalarMult","p256GetScalar"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/397135"},{"type":"FIX","url":"https://go.googlesource.com/go/+/37065847d87df92b5eb246c88ba2085efcf0b331"},{"type":"REPORT","url":"https://go.dev/issue/52075"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/oecdBNLOml8"}],"credits":[{"name":"Project Wycheproof"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0435"}},{"schema_version":"1.3.1","id":"GO-2022-0477","modified":"2023-06-12T18:45:41Z","published":"2022-06-09T01:43:37Z","aliases":["CVE-2022-30634"],"summary":"Indefinite hang with large buffers on Windows in crypto/rand","details":"On Windows, rand.Read will hang indefinitely if passed a buffer larger than 1 \u003c\u003c 32 - 1 bytes.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.17.11"},{"introduced":"1.18.0-0"},{"fixed":"1.18.3"}]}],"ecosystem_specific":{"imports":[{"path":"crypto/rand","goos":["windows"],"symbols":["Read"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/402257"},{"type":"FIX","url":"https://go.googlesource.com/go/+/bb1f4416180511231de6d17a1f2f55c82aafc863"},{"type":"REPORT","url":"https://go.dev/issue/52561"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/TzIC9-t8Ytg/m/IWz5T6x7AAAJ"}],"credits":[{"name":"Davis Goodin"},{"name":"Quim Muntal of Microsoft"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0477"}},{"schema_version":"1.3.1","id":"GO-2022-0493","modified":"2023-06-12T18:45:41Z","published":"2022-07-15T23:30:12Z","aliases":["CVE-2022-29526","GHSA-p782-xgp4-8hr8"],"summary":"Incorrect privilege reporting in syscall and golang.org/x/sys/unix","details":"When called with a non-zero flags parameter, the Faccessat function can incorrectly report that a file is accessible.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.17.10"},{"introduced":"1.18.0-0"},{"fixed":"1.18.2"}]}],"ecosystem_specific":{"imports":[{"path":"syscall","symbols":["Faccessat"]}]}},{"package":{"name":"golang.org/x/sys","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"0.0.0-20220412211240-33da011f77ad"}]}],"ecosystem_specific":{"imports":[{"path":"golang.org/x/sys/unix","symbols":["Access","Faccessat"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/399539"},{"type":"REPORT","url":"https://go.dev/issue/52313"},{"type":"FIX","url":"https://go.dev/cl/400074"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/Y5qrqw_lWdU"}],"credits":[{"name":"Joël Gähwiler (@256dpi)"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0493"}},{"schema_version":"1.3.1","id":"GO-2022-0515","modified":"2023-06-12T18:45:41Z","published":"2022-07-20T17:01:45Z","aliases":["CVE-2022-1962"],"summary":"Stack exhaustion due to deeply nested types in go/parser","details":"Calling any of the Parse functions on Go source code which contains deeply nested types or declarations can cause a panic due to stack exhaustion.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.17.12"},{"introduced":"1.18.0-0"},{"fixed":"1.18.4"}]}],"ecosystem_specific":{"imports":[{"path":"go/parser","symbols":["ParseExprFrom","ParseFile","parser.parseBinaryExpr","parser.parseIfStmt","parser.parsePrimaryExpr","parser.parseStmt","parser.parseUnaryExpr","parser.tryIdentOrType","resolver.closeScope","resolver.openScope"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/417063"},{"type":"FIX","url":"https://go.googlesource.com/go/+/695be961d57508da5a82217f7415200a11845879"},{"type":"REPORT","url":"https://go.dev/issue/53616"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/nqrv9fbR0zE"}],"credits":[{"name":"Juho Nurminen of Mattermost"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0515"}},{"schema_version":"1.3.1","id":"GO-2022-0520","modified":"2023-06-12T18:45:41Z","published":"2022-07-28T17:23:05Z","aliases":["CVE-2022-32148"],"summary":"Exposure of client IP addresses in net/http","details":"Client IP adresses may be unintentionally exposed via X-Forwarded-For headers.\n\nWhen httputil.ReverseProxy.ServeHTTP is called with a Request.Header map containing a nil value for the X-Forwarded-For header, ReverseProxy sets the client IP as the value of the X-Forwarded-For header, contrary to its documentation.\n\nIn the more usual case where a Director function sets the X-Forwarded-For header value to nil, ReverseProxy leaves the header unmodified as expected.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.17.12"},{"introduced":"1.18.0-0"},{"fixed":"1.18.4"}]}],"ecosystem_specific":{"imports":[{"path":"net/http","symbols":["Header.Clone"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/412857"},{"type":"FIX","url":"https://go.googlesource.com/go/+/b2cc0fecc2ccd80e6d5d16542cc684f97b3a9c8a"},{"type":"REPORT","url":"https://go.dev/issue/53423"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/nqrv9fbR0zE"}],"credits":[{"name":"Christian Mehlmauer"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0520"}},{"schema_version":"1.3.1","id":"GO-2022-0521","modified":"2023-06-12T18:45:41Z","published":"2022-07-20T17:02:04Z","aliases":["CVE-2022-28131"],"summary":"Stack exhaustion from deeply nested XML documents in encoding/xml","details":"Calling Decoder.Skip when parsing a deeply nested XML document can cause a panic due to stack exhaustion.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.17.12"},{"introduced":"1.18.0-0"},{"fixed":"1.18.4"}]}],"ecosystem_specific":{"imports":[{"path":"encoding/xml","symbols":["Decoder.Skip"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/417062"},{"type":"FIX","url":"https://go.googlesource.com/go/+/08c46ed43d80bbb67cb904944ea3417989be4af3"},{"type":"REPORT","url":"https://go.dev/issue/53614"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/nqrv9fbR0zE"}],"credits":[{"name":"Go Security Team"},{"name":"Juho Nurminen of Mattermost"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0521"}},{"schema_version":"1.3.1","id":"GO-2022-0522","modified":"2023-06-12T18:45:41Z","published":"2022-07-20T17:02:29Z","aliases":["CVE-2022-30632"],"summary":"Stack exhaustion on crafted paths in path/filepath","details":"Calling Glob on a path which contains a large number of path separators can cause a panic due to stack exhaustion.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.17.12"},{"introduced":"1.18.0-0"},{"fixed":"1.18.4"}]}],"ecosystem_specific":{"imports":[{"path":"path/filepath","symbols":["Glob"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/417066"},{"type":"FIX","url":"https://go.googlesource.com/go/+/ac68c6c683409f98250d34ad282b9e1b0c9095ef"},{"type":"REPORT","url":"https://go.dev/issue/53416"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/nqrv9fbR0zE"}],"credits":[{"name":"Juho Nurminen of Mattermost"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0522"}},{"schema_version":"1.3.1","id":"GO-2022-0523","modified":"2023-06-12T18:45:41Z","published":"2022-07-20T20:52:06Z","aliases":["CVE-2022-30633"],"summary":"Stack exhaustion when unmarshaling certain documents in encoding/xml","details":"Unmarshaling an XML document into a Go struct which has a nested field that uses the 'any' field tag can panic due to stack exhaustion.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.17.12"},{"introduced":"1.18.0-0"},{"fixed":"1.18.4"}]}],"ecosystem_specific":{"imports":[{"path":"encoding/xml","symbols":["Decoder.DecodeElement","Decoder.unmarshal","Decoder.unmarshalPath"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/417061"},{"type":"FIX","url":"https://go.googlesource.com/go/+/c4c1993fd2a5b26fe45c09592af6d3388a3b2e08"},{"type":"REPORT","url":"https://go.dev/issue/53611"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/nqrv9fbR0zE"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0523"}},{"schema_version":"1.3.1","id":"GO-2022-0524","modified":"2023-06-12T18:45:41Z","published":"2022-07-20T20:52:11Z","aliases":["CVE-2022-30631"],"summary":"Stack exhaustion when reading certain archives in compress/gzip","details":"Calling Reader.Read on an archive containing a large number of concatenated 0-length compressed files can cause a panic due to stack exhaustion.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.17.12"},{"introduced":"1.18.0-0"},{"fixed":"1.18.4"}]}],"ecosystem_specific":{"imports":[{"path":"compress/gzip","symbols":["Reader.Read"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/417067"},{"type":"FIX","url":"https://go.googlesource.com/go/+/b2b8872c876201eac2d0707276c6999ff3eb185e"},{"type":"REPORT","url":"https://go.dev/issue/53168"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/nqrv9fbR0zE"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0524"}},{"schema_version":"1.3.1","id":"GO-2022-0525","modified":"2023-06-12T18:45:41Z","published":"2022-07-25T17:34:18Z","aliases":["CVE-2022-1705"],"summary":"Improper sanitization of Transfer-Encoding headers in net/http","details":"The HTTP/1 client accepted some invalid Transfer-Encoding headers as indicating a \"chunked\" encoding. This could potentially allow for request smuggling, but only if combined with an intermediate server that also improperly failed to reject the header as invalid.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.17.12"},{"introduced":"1.18.0-0"},{"fixed":"1.18.4"}]}],"ecosystem_specific":{"imports":[{"path":"net/http","symbols":["transferReader.parseTransferEncoding"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/409874"},{"type":"FIX","url":"https://go.googlesource.com/go/+/e5017a93fcde94f09836200bca55324af037ee5f"},{"type":"REPORT","url":"https://go.dev/issue/53188"},{"type":"FIX","url":"https://go.dev/cl/410714"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/nqrv9fbR0zE"}],"credits":[{"name":"Zeyu Zhang (https://www.zeyu2001.com/)"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0525"}},{"schema_version":"1.3.1","id":"GO-2022-0526","modified":"2023-06-12T18:45:41Z","published":"2022-07-20T20:52:17Z","aliases":["CVE-2022-30635"],"summary":"Stack exhaustion when decoding certain messages in encoding/gob","details":"Calling Decoder.Decode on a message which contains deeply nested structures can cause a panic due to stack exhaustion.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.17.12"},{"introduced":"1.18.0-0"},{"fixed":"1.18.4"}]}],"ecosystem_specific":{"imports":[{"path":"encoding/gob","symbols":["Decoder.compileDec","Decoder.compileIgnoreSingle","Decoder.decIgnoreOpFor"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/417064"},{"type":"FIX","url":"https://go.googlesource.com/go/+/6fa37e98ea4382bf881428ee0c150ce591500eb7"},{"type":"REPORT","url":"https://go.dev/issue/53615"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/nqrv9fbR0zE"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0526"}},{"schema_version":"1.3.1","id":"GO-2022-0527","modified":"2023-06-12T18:45:41Z","published":"2022-07-20T20:52:22Z","aliases":["CVE-2022-30630"],"summary":"Stack exhaustion in Glob on certain paths in io/fs","details":"Calling Glob on a path which contains a large number of path separators can cause a panic due to stack exhaustion.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.17.12"},{"introduced":"1.18.0-0"},{"fixed":"1.18.4"}]}],"ecosystem_specific":{"imports":[{"path":"io/fs","symbols":["Glob"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/417065"},{"type":"FIX","url":"https://go.googlesource.com/go/+/fa2d41d0ca736f3ad6b200b2a4e134364e9acc59"},{"type":"REPORT","url":"https://go.dev/issue/53415"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/nqrv9fbR0zE"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0527"}},{"schema_version":"1.3.1","id":"GO-2022-0531","modified":"2023-06-12T18:45:41Z","published":"2022-07-28T17:24:57Z","aliases":["CVE-2022-30629"],"summary":"Session tickets lack random ticket_age_add in crypto/tls","details":"An attacker can correlate a resumed TLS session with a previous connection.\n\nSession tickets generated by crypto/tls do not contain a randomly generated ticket_age_add, which allows an attacker that can observe TLS handshakes to correlate successive connections by comparing ticket ages during session resumption.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.17.11"},{"introduced":"1.18.0-0"},{"fixed":"1.18.3"}]}],"ecosystem_specific":{"imports":[{"path":"crypto/tls","symbols":["serverHandshakeStateTLS13.sendSessionTickets"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/405994"},{"type":"FIX","url":"https://go.googlesource.com/go/+/fe4de36198794c447fbd9d7cc2d7199a506c76a5"},{"type":"REPORT","url":"https://go.dev/issue/52814"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/TzIC9-t8Ytg/m/IWz5T6x7AAAJ"}],"credits":[{"name":"Github user @nervuri"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0531"}},{"schema_version":"1.3.1","id":"GO-2022-0532","modified":"2023-06-12T18:45:41Z","published":"2022-07-26T21:41:20Z","aliases":["CVE-2022-30580"],"summary":"Empty Cmd.Path can trigger unintended binary in os/exec on Windows","details":"On Windows, executing Cmd.Run, Cmd.Start, Cmd.Output, or Cmd.CombinedOutput when Cmd.Path is unset will unintentionally trigger execution of any binaries in the working directory named either \"..com\" or \"..exe\".","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.17.11"},{"introduced":"1.18.0-0"},{"fixed":"1.18.3"}]}],"ecosystem_specific":{"imports":[{"path":"os/exec","goos":["windows"],"symbols":["Cmd.Start"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/403759"},{"type":"FIX","url":"https://go.googlesource.com/go/+/960ffa98ce73ef2c2060c84c7ac28d37a83f345e"},{"type":"REPORT","url":"https://go.dev/issue/52574"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/TzIC9-t8Ytg/m/IWz5T6x7AAAJ"}],"credits":[{"name":"Chris Darroch (chrisd8088@github.com)"},{"name":"brian m. carlson (bk2204@github.com)"},{"name":"Mikhail Shcherbakov (https://twitter.com/yu5k3)"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0532"}},{"schema_version":"1.3.1","id":"GO-2022-0533","modified":"2023-06-12T18:45:41Z","published":"2022-07-28T17:25:07Z","aliases":["CVE-2022-29804"],"summary":"Path traversal on Windows in path/filepath","details":"On Windows, the filepath.Clean function can convert certain invalid paths to valid, absolute paths, potentially allowing a directory traversal attack.\n\nFor example, Clean(`.\\c:`) returns `c:`.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.17.11"},{"introduced":"1.18.0-0"},{"fixed":"1.18.3"}]}],"ecosystem_specific":{"imports":[{"path":"path/filepath","goos":["windows"],"symbols":["Clean"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/401595"},{"type":"FIX","url":"https://go.googlesource.com/go/+/9cd1818a7d019c02fa4898b3e45a323e35033290"},{"type":"REPORT","url":"https://go.dev/issue/52476"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/TzIC9-t8Ytg/m/IWz5T6x7AAAJ"}],"credits":[{"name":"Unrud"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0533"}},{"schema_version":"1.3.1","id":"GO-2022-0535","modified":"2023-06-12T18:45:41Z","published":"2022-08-01T22:21:17Z","aliases":["CVE-2020-0601"],"summary":"Certificate validation bypass on Windows in crypto/x509","details":"A Windows vulnerability allows attackers to spoof valid certificate chains when the system root store is in use.\n\nA workaround is present in Go 1.12.6+ and Go 1.13.7+, but affected users should additionally install the Windows security update to protect their system.\n\nSee https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2020-0601 for details on the Windows vulnerability.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.12.16"},{"introduced":"1.13.0-0"},{"fixed":"1.13.7"}]}],"ecosystem_specific":{"imports":[{"path":"crypto/x509","goos":["windows"],"symbols":["Certificate.systemVerify"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/215905"},{"type":"FIX","url":"https://go.googlesource.com/go/+/953bc8f391a63adf00bac2515dba62abe8a1e2c2"},{"type":"REPORT","url":"https://go.dev/issue/36834"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/Hsw4mHYc470/m/WJeW5wguEgAJ"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0535"}},{"schema_version":"1.3.1","id":"GO-2022-0536","modified":"2023-06-12T18:45:41Z","published":"2022-08-01T22:20:53Z","aliases":["CVE-2019-9512","CVE-2019-9514","GHSA-39qc-96h7-956f","GHSA-hgr8-6h9x-f7q9"],"summary":"Reset flood in net/http and golang.org/x/net/http","details":"Some HTTP/2 implementations are vulnerable to a reset flood, potentially leading to a denial of service.\n\nServers that accept direct connections from untrusted clients could be remotely made to allocate an unlimited amount of memory, until the program crashes. The attacker opens a number of streams and sends an invalid request over each stream that should solicit a stream of RST_STREAM frames from the peer. Depending on how the peer queues the RST_STREAM frames, this can consume excess memory, CPU, or both.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.11.13"},{"introduced":"1.12.0-0"},{"fixed":"1.12.8"}]}],"ecosystem_specific":{"imports":[{"path":"net/http","symbols":["http2serverConn.scheduleFrameWrite","http2serverConn.serve","http2serverConn.writeFrame"]}]}},{"package":{"name":"golang.org/x/net","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"0.0.0-20190813141303-74dc4d7220e7"}]}],"ecosystem_specific":{"imports":[{"path":"golang.org/x/net/http2","symbols":["Server.ServeConn","serverConn.scheduleFrameWrite","serverConn.serve","serverConn.writeFrame"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/190137"},{"type":"FIX","url":"https://go.googlesource.com/go/+/145e193131eb486077b66009beb051aba07c52a5"},{"type":"REPORT","url":"https://go.dev/issue/33606"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/65QixT3tcmg/m/DrFiG6vvCwAJ"}],"credits":[{"name":"Jonathan Looney of Netflix"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0536"}},{"schema_version":"1.3.1","id":"GO-2022-0537","modified":"2023-06-12T18:45:41Z","published":"2022-08-01T22:21:06Z","aliases":["CVE-2022-32189"],"summary":"Panic when decoding Float and Rat types in math/big","details":"Decoding big.Float and big.Rat types can panic if the encoded message is too short, potentially allowing a denial of service.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.17.13"},{"introduced":"1.18.0-0"},{"fixed":"1.18.5"}]}],"ecosystem_specific":{"imports":[{"path":"math/big","symbols":["Float.GobDecode","Rat.GobDecode"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/417774"},{"type":"FIX","url":"https://go.googlesource.com/go/+/055113ef364337607e3e72ed7d48df67fde6fc66"},{"type":"REPORT","url":"https://go.dev/issue/53871"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/YqYYG87xB10"}],"credits":[{"name":"@catenacyber"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0537"}},{"schema_version":"1.3.1","id":"GO-2022-0761","modified":"2023-06-12T18:45:41Z","published":"2022-08-09T17:05:15Z","aliases":["CVE-2016-5386"],"summary":"Improper input validation in net/http and net/http/cgi","details":"An input validation flaw in the CGI components allows the HTTP_PROXY environment variable to be set by the incoming Proxy header, which changes where Go by default proxies all outbound HTTP requests.\n\nThis environment variable is also used to set the outgoing proxy, enabling an attacker to insert a proxy into outgoing requests of a CGI program.\n\nRead more about \"httpoxy\" here: https://httpoxy.org.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.6.3"}]}],"ecosystem_specific":{"imports":[{"path":"net/http","symbols":["Handler.ServeHTTP"]},{"path":"net/http/cgi","symbols":["ProxyFromEnvironment"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/25010"},{"type":"FIX","url":"https://go.googlesource.com/go/+/b97df54c31d6c4cc2a28a3c83725366d52329223"},{"type":"REPORT","url":"https://go.dev/issue/16405"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/7jZDOQ8f8tM/m/eWRWHnc8CgAJ"}],"credits":[{"name":"Dominic Scheirlinck"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0761"}},{"schema_version":"1.3.1","id":"GO-2022-0969","modified":"2023-06-12T18:45:41Z","published":"2022-09-12T20:23:06Z","aliases":["CVE-2022-27664","GHSA-69cg-p879-7622"],"summary":"Denial of service in net/http and golang.org/x/net/http2","details":"HTTP/2 server connections can hang forever waiting for a clean shutdown that was preempted by a fatal error. This condition can be exploited by a malicious client to cause a denial of service.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.18.6"},{"introduced":"1.19.0-0"},{"fixed":"1.19.1"}]}],"ecosystem_specific":{"imports":[{"path":"net/http","symbols":["ListenAndServe","ListenAndServeTLS","Serve","ServeTLS","Server.ListenAndServe","Server.ListenAndServeTLS","Server.Serve","Server.ServeTLS","http2Server.ServeConn","http2serverConn.goAway"]}]}},{"package":{"name":"golang.org/x/net","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"0.0.0-20220906165146-f3363e06e74c"}]}],"ecosystem_specific":{"imports":[{"path":"golang.org/x/net/http2","symbols":["Server.ServeConn","serverConn.goAway"]}]}}],"references":[{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/x49AQzIVX-s"},{"type":"REPORT","url":"https://go.dev/issue/54658"},{"type":"FIX","url":"https://go.dev/cl/428735"}],"credits":[{"name":"Bahruz Jabiyev"},{"name":"Tommaso Innocenti"},{"name":"Anthony Gavazzi"},{"name":"Steven Sprecher"},{"name":"Kaan Onarlioglu"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0969"}},{"schema_version":"1.3.1","id":"GO-2022-0988","modified":"2023-06-12T18:45:41Z","published":"2022-09-12T20:23:15Z","aliases":["CVE-2022-32190"],"summary":"Failure to strip relative path components in net/url","details":"JoinPath and URL.JoinPath do not remove ../ path elements appended to a relative path. For example, JoinPath(\"https://go.dev\", \"../go\") returns the URL \"https://go.dev/../go\", despite the JoinPath documentation stating that ../ path elements are removed from the result.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"1.19.0-0"},{"fixed":"1.19.1"}]}],"ecosystem_specific":{"imports":[{"path":"net/url","symbols":["JoinPath","URL.JoinPath"]}]}}],"references":[{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/x49AQzIVX-s"},{"type":"REPORT","url":"https://go.dev/issue/54385"},{"type":"FIX","url":"https://go.dev/cl/423514"}],"credits":[{"name":"@q0jt"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0988"}},{"schema_version":"1.3.1","id":"GO-2022-1037","modified":"2023-06-12T18:45:41Z","published":"2022-10-06T16:26:05Z","aliases":["CVE-2022-2879"],"summary":"Unbounded memory consumption when reading headers in archive/tar","details":"Reader.Read does not set a limit on the maximum size of file headers. A maliciously crafted archive could cause Read to allocate unbounded amounts of memory, potentially causing resource exhaustion or panics. After fix, Reader.Read limits the maximum size of header blocks to 1 MiB.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.18.7"},{"introduced":"1.19.0-0"},{"fixed":"1.19.2"}]}],"ecosystem_specific":{"imports":[{"path":"archive/tar","symbols":["Reader.Next","Reader.next","Writer.WriteHeader","Writer.writePAXHeader","parsePAX"]}]}}],"references":[{"type":"REPORT","url":"https://go.dev/issue/54853"},{"type":"FIX","url":"https://go.dev/cl/439355"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/xtuG5faxtaU"}],"credits":[{"name":"Adam Korczynski (ADA Logics)"},{"name":"OSS-Fuzz"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-1037"}},{"schema_version":"1.3.1","id":"GO-2022-1038","modified":"2023-06-12T18:45:41Z","published":"2022-10-06T16:42:43Z","aliases":["CVE-2022-2880"],"summary":"Incorrect sanitization of forwarded query parameters in net/http/httputil","details":"Requests forwarded by ReverseProxy include the raw query parameters from the inbound request, including unparsable parameters rejected by net/http. This could permit query parameter smuggling when a Go proxy forwards a parameter with an unparsable value.\n\nAfter fix, ReverseProxy sanitizes the query parameters in the forwarded query when the outbound request's Form field is set after the ReverseProxy. Director function returns, indicating that the proxy has parsed the query parameters. Proxies which do not parse query parameters continue to forward the original query parameters unchanged.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.18.7"},{"introduced":"1.19.0-0"},{"fixed":"1.19.2"}]}],"ecosystem_specific":{"imports":[{"path":"net/http/httputil","symbols":["ReverseProxy.ServeHTTP"]}]}}],"references":[{"type":"REPORT","url":"https://go.dev/issue/54663"},{"type":"FIX","url":"https://go.dev/cl/432976"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/xtuG5faxtaU"}],"credits":[{"name":"Gal Goldstein (Security Researcher, Oxeye)"},{"name":"Daniel Abeles (Head of Research, Oxeye)"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-1038"}},{"schema_version":"1.3.1","id":"GO-2022-1039","modified":"2023-06-12T18:45:41Z","published":"2022-10-06T16:42:07Z","aliases":["CVE-2022-41715"],"summary":"Memory exhaustion when compiling regular expressions in regexp/syntax","details":"Programs which compile regular expressions from untrusted sources may be vulnerable to memory exhaustion or denial of service.\n\nThe parsed regexp representation is linear in the size of the input, but in some cases the constant factor can be as high as 40,000, making relatively small regexps consume much larger amounts of memory.\n\nAfter fix, each regexp being parsed is limited to a 256 MB memory footprint. Regular expressions whose representation would use more space than that are rejected. Normal use of regular expressions is unaffected.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.18.7"},{"introduced":"1.19.0-0"},{"fixed":"1.19.2"}]}],"ecosystem_specific":{"imports":[{"path":"regexp/syntax","symbols":["Parse","parse","parser.factor","parser.push","parser.repeat"]}]}}],"references":[{"type":"REPORT","url":"https://go.dev/issue/55949"},{"type":"FIX","url":"https://go.dev/cl/439356"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/xtuG5faxtaU"}],"credits":[{"name":"Adam Korczynski (ADA Logics)"},{"name":"OSS-Fuzz"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-1039"}},{"schema_version":"1.3.1","id":"GO-2022-1095","modified":"2023-06-12T18:45:41Z","published":"2022-11-01T23:55:57Z","aliases":["CVE-2022-41716"],"summary":"Unsanitized NUL in environment variables on Windows in syscall and os/exec","details":"Due to unsanitized NUL values, attackers may be able to maliciously set environment variables on Windows.\n\nIn syscall.StartProcess and os/exec.Cmd, invalid environment variable values containing NUL values are not properly checked for. A malicious environment variable value can exploit this behavior to set a value for a different environment variable. For example, the environment variable string \"A=B\\x00C=D\" sets the variables \"A=B\" and \"C=D\".","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.18.8"},{"introduced":"1.19.0-0"},{"fixed":"1.19.3"}]}],"ecosystem_specific":{"imports":[{"path":"syscall","goos":["windows"],"symbols":["StartProcess"]},{"path":"os/exec","goos":["windows"],"symbols":["Cmd.CombinedOutput","Cmd.Environ","Cmd.Output","Cmd.Run","Cmd.Start","Cmd.environ","dedupEnv","dedupEnvCase"]}]}}],"references":[{"type":"REPORT","url":"https://go.dev/issue/56284"},{"type":"FIX","url":"https://go.dev/cl/446916"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/mbHY1UY3BaM/m/hSpmRzk-AgAJ"}],"credits":[{"name":"RyotaK (https://twitter.com/ryotkak)"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-1095"}},{"schema_version":"1.3.1","id":"GO-2022-1143","modified":"2023-06-12T18:45:41Z","published":"2022-12-07T16:08:45Z","aliases":["CVE-2022-41720"],"summary":"Restricted file access on Windows in os and net/http","details":"On Windows, restricted files can be accessed via os.DirFS and http.Dir.\n\nThe os.DirFS function and http.Dir type provide access to a tree of files rooted at a given directory. These functions permit access to Windows device files under that root. For example, os.DirFS(\"C:/tmp\").Open(\"COM1\") opens the COM1 device. Both os.DirFS and http.Dir only provide read-only filesystem access.\n\nIn addition, on Windows, an os.DirFS for the directory (the root of the current drive) can permit a maliciously crafted path to escape from the drive and access any path on the system.\n\nWith fix applied, the behavior of os.DirFS(\"\") has changed. Previously, an empty root was treated equivalently to \"/\", so os.DirFS(\"\").Open(\"tmp\") would open the path \"/tmp\". This now returns an error.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.18.9"},{"introduced":"1.19.0-0"},{"fixed":"1.19.4"}]}],"ecosystem_specific":{"imports":[{"path":"os","goos":["windows"],"symbols":["DirFS","dirFS.Open","dirFS.Stat"]},{"path":"net/http","goos":["windows"],"symbols":["Dir.Open","ServeFile","fileHandler.ServeHTTP","fileTransport.RoundTrip"]}]}}],"references":[{"type":"REPORT","url":"https://go.dev/issue/56694"},{"type":"FIX","url":"https://go.dev/cl/455716"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/L_3rmdT0BMU/m/yZDrXjIiBQAJ"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-1143"}},{"schema_version":"1.3.1","id":"GO-2022-1144","modified":"2023-06-12T18:45:41Z","published":"2022-12-08T19:01:21Z","aliases":["CVE-2022-41717","GHSA-xrjj-mj9h-534m"],"summary":"Excessive memory growth in net/http and golang.org/x/net/http2","details":"An attacker can cause excessive memory growth in a Go server accepting HTTP/2 requests.\n\nHTTP/2 server connections contain a cache of HTTP header keys sent by the client. While the total number of entries in this cache is capped, an attacker sending very large keys can cause the server to allocate approximately 64 MiB per open connection.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.18.9"},{"introduced":"1.19.0-0"},{"fixed":"1.19.4"}]}],"ecosystem_specific":{"imports":[{"path":"net/http","symbols":["ListenAndServe","ListenAndServeTLS","Serve","ServeTLS","Server.ListenAndServe","Server.ListenAndServeTLS","Server.Serve","Server.ServeTLS","http2Server.ServeConn","http2serverConn.canonicalHeader"]}]}},{"package":{"name":"golang.org/x/net","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"0.4.0"}]}],"ecosystem_specific":{"imports":[{"path":"golang.org/x/net/http2","symbols":["Server.ServeConn","serverConn.canonicalHeader"]}]}}],"references":[{"type":"REPORT","url":"https://go.dev/issue/56350"},{"type":"FIX","url":"https://go.dev/cl/455717"},{"type":"FIX","url":"https://go.dev/cl/455635"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/L_3rmdT0BMU/m/yZDrXjIiBQAJ"}],"credits":[{"name":"Josselin Costanzi"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-1144"}},{"schema_version":"1.3.1","id":"GO-2023-1568","modified":"2023-06-12T18:45:41Z","published":"2023-02-16T19:49:19Z","aliases":["CVE-2022-41722"],"summary":"Path traversal on Windows in path/filepath","details":"A path traversal vulnerability exists in filepath.Clean on Windows.\n\nOn Windows, the filepath.Clean function could transform an invalid path such as \"a/../c:/b\" into the valid path \"c:\\b\". This transformation of a relative (if invalid) path into an absolute path could enable a directory traversal attack.\n\nAfter fix, the filepath.Clean function transforms this path into the relative (but still invalid) path \".\\c:\\b\".","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.19.6"},{"introduced":"1.20.0-0"},{"fixed":"1.20.1"}]}],"ecosystem_specific":{"imports":[{"path":"path/filepath","goos":["windows"],"symbols":["Abs","Clean","Dir","EvalSymlinks","Glob","IsLocal","Join","Rel","Walk","WalkDir"]}]}}],"references":[{"type":"REPORT","url":"https://go.dev/issue/57274"},{"type":"FIX","url":"https://go.dev/cl/468123"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/V0aBFqaFs_E"}],"credits":[{"name":"RyotaK (https://ryotak.net)"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2023-1568"}},{"schema_version":"1.3.1","id":"GO-2023-1569","modified":"2023-06-12T18:45:41Z","published":"2023-02-21T20:44:30Z","aliases":["CVE-2022-41725"],"summary":"Excessive resource consumption in mime/multipart","details":"A denial of service is possible from excessive resource consumption in net/http and mime/multipart.\n\nMultipart form parsing with mime/multipart.Reader.ReadForm can consume largely unlimited amounts of memory and disk files. This also affects form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue.\n\nReadForm takes a maxMemory parameter, and is documented as storing \"up to maxMemory bytes +10MB (reserved for non-file parts) in memory\". File parts which cannot be stored in memory are stored on disk in temporary files. The unconfigurable 10MB reserved for non-file parts is excessively large and can potentially open a denial of service vector on its own. However, ReadForm did not properly account for all memory consumed by a parsed form, such as map entry overhead, part names, and MIME headers, permitting a maliciously crafted form to consume well over 10MB. In addition, ReadForm contained no limit on the number of disk files created, permitting a relatively small request body to create a large number of disk temporary files.\n\nWith fix, ReadForm now properly accounts for various forms of memory overhead, and should now stay within its documented limit of 10MB + maxMemory bytes of memory consumption. Users should still be aware that this limit is high and may still be hazardous.\n\nIn addition, ReadForm now creates at most one on-disk temporary file, combining multiple form parts into a single temporary file. The mime/multipart.File interface type's documentation states, \"If stored on disk, the File's underlying concrete type will be an *os.File.\". This is no longer the case when a form contains more than one file part, due to this coalescing of parts into a single file. The previous behavior of using distinct files for each form part may be reenabled with the environment variable GODEBUG=multipartfiles=distinct.\n\nUsers should be aware that multipart.ReadForm and the http.Request methods that call it do not limit the amount of disk consumed by temporary files. Callers can limit the size of form data with http.MaxBytesReader.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.19.6"},{"introduced":"1.20.0-0"},{"fixed":"1.20.1"}]}],"ecosystem_specific":{"imports":[{"path":"mime/multipart","symbols":["Reader.ReadForm"]}]}}],"references":[{"type":"REPORT","url":"https://go.dev/issue/58006"},{"type":"FIX","url":"https://go.dev/cl/468124"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/V0aBFqaFs_E"}],"credits":[{"name":"Arpad Ryszka"},{"name":"Jakob Ackermann (@das7pad)"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2023-1569"}},{"schema_version":"1.3.1","id":"GO-2023-1570","modified":"2023-06-12T18:45:41Z","published":"2023-02-16T22:24:51Z","aliases":["CVE-2022-41724"],"summary":"Panic on large handshake records in crypto/tls","details":"Large handshake records may cause panics in crypto/tls.\n\nBoth clients and servers may send large TLS handshake records which cause servers and clients, respectively, to panic when attempting to construct responses.\n\nThis affects all TLS 1.3 clients, TLS 1.2 clients which explicitly enable session resumption (by setting Config.ClientSessionCache to a non-nil value), and TLS 1.3 servers which request client certificates (by setting Config.ClientAuth \u003e= RequestClientCert).","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.19.6"},{"introduced":"1.20.0-0"},{"fixed":"1.20.1"}]}],"ecosystem_specific":{"imports":[{"path":"crypto/tls","symbols":["Conn.Handshake","Conn.HandshakeContext","Conn.Read","Conn.Write","Conn.clientHandshake","Conn.handleKeyUpdate","Conn.handlePostHandshakeMessage","Conn.handleRenegotiation","Conn.loadSession","Conn.readClientHello","Conn.readHandshake","Conn.writeRecord","ConnectionState.ExportKeyingMaterial","Dial","DialWithDialer","Dialer.Dial","Dialer.DialContext","certificateMsg.marshal","certificateMsgTLS13.marshal","certificateRequestMsg.marshal","certificateRequestMsgTLS13.marshal","certificateStatusMsg.marshal","certificateVerifyMsg.marshal","cipherSuiteTLS13.expandLabel","clientHandshakeState.doFullHandshake","clientHandshakeState.handshake","clientHandshakeState.readFinished","clientHandshakeState.readSessionTicket","clientHandshakeState.sendFinished","clientHandshakeStateTLS13.handshake","clientHandshakeStateTLS13.processHelloRetryRequest","clientHandshakeStateTLS13.readServerCertificate","clientHandshakeStateTLS13.readServerFinished","clientHandshakeStateTLS13.readServerParameters","clientHandshakeStateTLS13.sendClientCertificate","clientHandshakeStateTLS13.sendClientFinished","clientHandshakeStateTLS13.sendDummyChangeCipherSpec","clientHelloMsg.marshal","clientHelloMsg.marshalWithoutBinders","clientHelloMsg.updateBinders","clientKeyExchangeMsg.marshal","encryptedExtensionsMsg.marshal","endOfEarlyDataMsg.marshal","finishedMsg.marshal","handshakeMessage.marshal","helloRequestMsg.marshal","keyUpdateMsg.marshal","newSessionTicketMsg.marshal","newSessionTicketMsgTLS13.marshal","serverHandshakeState.doFullHandshake","serverHandshakeState.doResumeHandshake","serverHandshakeState.readFinished","serverHandshakeState.sendFinished","serverHandshakeState.sendSessionTicket","serverHandshakeStateTLS13.checkForResumption","serverHandshakeStateTLS13.doHelloRetryRequest","serverHandshakeStateTLS13.readClientCertificate","serverHandshakeStateTLS13.readClientFinished","serverHandshakeStateTLS13.sendDummyChangeCipherSpec","serverHandshakeStateTLS13.sendServerCertificate","serverHandshakeStateTLS13.sendServerFinished","serverHandshakeStateTLS13.sendServerParameters","serverHandshakeStateTLS13.sendSessionTickets","serverHelloDoneMsg.marshal","serverHelloMsg.marshal","serverKeyExchangeMsg.marshal","sessionState.marshal","sessionStateTLS13.marshal"]}]}}],"references":[{"type":"REPORT","url":"https://go.dev/issue/58001"},{"type":"FIX","url":"https://go.dev/cl/468125"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/V0aBFqaFs_E"}],"credits":[{"name":"Marten Seemann"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2023-1570"}},{"schema_version":"1.3.1","id":"GO-2023-1571","modified":"2023-06-12T18:45:41Z","published":"2023-02-16T22:31:36Z","aliases":["CVE-2022-41723","GHSA-vvpx-j8f3-3w6h"],"summary":"Denial of service via crafted HTTP/2 stream in net/http and golang.org/x/net","details":"A maliciously crafted HTTP/2 stream could cause excessive CPU consumption in the HPACK decoder, sufficient to cause a denial of service from a small number of small requests.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.19.6"},{"introduced":"1.20.0-0"},{"fixed":"1.20.1"}]}],"ecosystem_specific":{"imports":[{"path":"net/http","symbols":["Client.Do","Client.Get","Client.Head","Client.Post","Client.PostForm","Get","Head","ListenAndServe","ListenAndServeTLS","Post","PostForm","Serve","ServeTLS","Server.ListenAndServe","Server.ListenAndServeTLS","Server.Serve","Server.ServeTLS","Transport.RoundTrip"]}]}},{"package":{"name":"golang.org/x/net","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"0.7.0"}]}],"ecosystem_specific":{"imports":[{"path":"golang.org/x/net/http2","symbols":["ClientConn.Close","ClientConn.Ping","ClientConn.RoundTrip","ClientConn.Shutdown","ConfigureServer","ConfigureTransport","ConfigureTransports","ConnectionError.Error","ErrCode.String","FrameHeader.String","FrameType.String","FrameWriteRequest.String","Framer.ReadFrame","Framer.WriteContinuation","Framer.WriteData","Framer.WriteDataPadded","Framer.WriteGoAway","Framer.WriteHeaders","Framer.WritePing","Framer.WritePriority","Framer.WritePushPromise","Framer.WriteRSTStream","Framer.WriteRawFrame","Framer.WriteSettings","Framer.WriteSettingsAck","Framer.WriteWindowUpdate","GoAwayError.Error","ReadFrameHeader","Server.ServeConn","Setting.String","SettingID.String","SettingsFrame.ForeachSetting","StreamError.Error","Transport.CloseIdleConnections","Transport.NewClientConn","Transport.RoundTrip","Transport.RoundTripOpt","bufferedWriter.Flush","bufferedWriter.Write","chunkWriter.Write","clientConnPool.GetClientConn","connError.Error","dataBuffer.Read","duplicatePseudoHeaderError.Error","gzipReader.Close","gzipReader.Read","headerFieldNameError.Error","headerFieldValueError.Error","noDialClientConnPool.GetClientConn","noDialH2RoundTripper.RoundTrip","pipe.Read","priorityWriteScheduler.CloseStream","priorityWriteScheduler.OpenStream","pseudoHeaderError.Error","requestBody.Close","requestBody.Read","responseWriter.Flush","responseWriter.FlushError","responseWriter.Push","responseWriter.SetReadDeadline","responseWriter.SetWriteDeadline","responseWriter.Write","responseWriter.WriteHeader","responseWriter.WriteString","serverConn.CloseConn","serverConn.Flush","stickyErrWriter.Write","transportResponseBody.Close","transportResponseBody.Read","writeData.String"]},{"path":"golang.org/x/net/http2/hpack","symbols":["Decoder.DecodeFull","Decoder.Write","Decoder.parseFieldLiteral","Decoder.readString"]}]}}],"references":[{"type":"REPORT","url":"https://go.dev/issue/57855"},{"type":"FIX","url":"https://go.dev/cl/468135"},{"type":"FIX","url":"https://go.dev/cl/468295"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/V0aBFqaFs_E"}],"credits":[{"name":"Philippe Antoine (Catena cyber)"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2023-1571"}},{"schema_version":"1.3.1","id":"GO-2023-1621","modified":"2023-06-12T18:45:41Z","published":"2023-03-08T19:30:53Z","aliases":["CVE-2023-24532"],"summary":"Incorrect calculation on P256 curves in crypto/internal/nistec","details":"The ScalarMult and ScalarBaseMult methods of the P256 Curve may return an incorrect result if called with some specific unreduced scalars (a scalar larger than the order of the curve).\n\nThis does not impact usages of crypto/ecdsa or crypto/ecdh.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.19.7"},{"introduced":"1.20.0-0"},{"fixed":"1.20.2"}]}],"ecosystem_specific":{"imports":[{"path":"crypto/internal/nistec","symbols":["P256OrdInverse","P256Point.ScalarBaseMult","P256Point.ScalarMult"]}]}}],"references":[{"type":"REPORT","url":"https://go.dev/issue/58647"},{"type":"FIX","url":"https://go.dev/cl/471255"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/3-TpUx48iQY"}],"credits":[{"name":"Guido Vranken, via the Ethereum Foundation bug bounty program"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2023-1621"}},{"schema_version":"1.3.1","id":"GO-2023-1702","modified":"2023-06-12T18:45:41Z","published":"2023-04-05T21:05:07Z","aliases":["CVE-2023-24537"],"summary":"Infinite loop in parsing in go/scanner","details":"Calling any of the Parse functions on Go source code which contains //line directives with very large line numbers can cause an infinite loop due to integer overflow.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.19.8"},{"introduced":"1.20.0-0"},{"fixed":"1.20.3"}]}],"ecosystem_specific":{"imports":[{"path":"go/scanner","symbols":["Scanner.Scan","Scanner.updateLineInfo"]}]}}],"references":[{"type":"REPORT","url":"https://go.dev/issue/59180"},{"type":"FIX","url":"https://go.dev/cl/482078"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/Xdv6JL9ENs8"}],"credits":[{"name":"Philippe Antoine (Catena cyber)"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2023-1702"}},{"schema_version":"1.3.1","id":"GO-2023-1703","modified":"2023-06-12T18:45:41Z","published":"2023-04-05T21:05:27Z","aliases":["CVE-2023-24538"],"summary":"Backticks not treated as string delimiters in html/template","details":"Templates do not properly consider backticks (`) as Javascript string delimiters, and do not escape them as expected.\n\nBackticks are used, since ES6, for JS template literals. If a template contains a Go template action within a Javascript template literal, the contents of the action can be used to terminate the literal, injecting arbitrary Javascript code into the Go template.\n\nAs ES6 template literals are rather complex, and themselves can do string interpolation, the decision was made to simply disallow Go template actions from being used inside of them (e.g. \"var a = {{.}}\"), since there is no obviously safe way to allow this behavior. This takes the same approach as github.com/google/safehtml.\n\nWith fix, Template.Parse returns an Error when it encounters templates like this, with an ErrorCode of value 12. This ErrorCode is currently unexported, but will be exported in the release of Go 1.21.\n\nUsers who rely on the previous behavior can re-enable it using the GODEBUG flag jstmpllitinterp=1, with the caveat that backticks will now be escaped. This should be used with caution.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.19.8"},{"introduced":"1.20.0-0"},{"fixed":"1.20.3"}]}],"ecosystem_specific":{"imports":[{"path":"html/template","symbols":["Template.Execute","Template.ExecuteTemplate","tJS","tJSDelimited"]}]}}],"references":[{"type":"REPORT","url":"https://go.dev/issue/59234"},{"type":"FIX","url":"https://go.dev/cl/482079"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/Xdv6JL9ENs8"}],"credits":[{"name":"Sohom Datta, Manipal Institute of Technology"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2023-1703"}},{"schema_version":"1.3.1","id":"GO-2023-1704","modified":"2023-06-12T18:45:41Z","published":"2023-04-05T21:04:28Z","aliases":["CVE-2023-24534"],"summary":"Excessive memory allocation in net/http and net/textproto","details":"HTTP and MIME header parsing can allocate large amounts of memory, even when parsing small inputs, potentially leading to a denial of service.\n\nCertain unusual patterns of input data can cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service.\n\nWith fix, header parsing now correctly allocates only the memory required to hold parsed headers.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.19.8"},{"introduced":"1.20.0-0"},{"fixed":"1.20.3"}]}],"ecosystem_specific":{"imports":[{"path":"net/textproto","symbols":["Reader.ReadMIMEHeader","Reader.upcomingHeaderNewlines","readMIMEHeader"]}]}}],"references":[{"type":"REPORT","url":"https://go.dev/issue/58975"},{"type":"FIX","url":"https://go.dev/cl/481994"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/Xdv6JL9ENs8"}],"credits":[{"name":"Jakob Ackermann (@das7pad)"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2023-1704"}},{"schema_version":"1.3.1","id":"GO-2023-1705","modified":"2023-06-12T18:45:41Z","published":"2023-04-05T21:04:39Z","aliases":["CVE-2023-24536"],"summary":"Excessive resource consumption in net/http, net/textproto and mime/multipart","details":"Multipart form parsing can consume large amounts of CPU and memory when processing form inputs containing very large numbers of parts.\n\nThis stems from several causes:\n\n1. mime/multipart.Reader.ReadForm limits the total memory a parsed multipart form can consume. ReadForm can undercount the amount of memory consumed, leading it to accept larger inputs than intended.\n\n2. Limiting total memory does not account for increased pressure on the garbage collector from large numbers of small allocations in forms with many parts.\n\n3. ReadForm can allocate a large number of short-lived buffers, further increasing pressure on the garbage collector.\n\nThe combination of these factors can permit an attacker to cause an program that parses multipart forms to consume large amounts of CPU and memory, potentially resulting in a denial of service. This affects programs that use mime/multipart.Reader.ReadForm, as well as form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue.\n\nWith fix, ReadForm now does a better job of estimating the memory consumption of parsed forms, and performs many fewer short-lived allocations.\n\nIn addition, the fixed mime/multipart.Reader imposes the following limits on the size of parsed forms:\n\n1. Forms parsed with ReadForm may contain no more than 1000 parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxparts=.\n\n2. Form parts parsed with NextPart and NextRawPart may contain no more than 10,000 header fields. In addition, forms parsed with ReadForm may contain no more than 10,000 header fields across all parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxheaders=.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.19.8"},{"introduced":"1.20.0-0"},{"fixed":"1.20.3"}]}],"ecosystem_specific":{"imports":[{"path":"mime/multipart","symbols":["Part.populateHeaders","Reader.NextPart","Reader.NextRawPart","Reader.ReadForm","Reader.nextPart","Reader.readForm","mimeHeaderSize","newPart","readMIMEHeader"]},{"path":"net/textproto","symbols":["Reader.ReadMIMEHeader","readMIMEHeader"]}]}}],"references":[{"type":"REPORT","url":"https://go.dev/issue/59153"},{"type":"FIX","url":"https://go.dev/cl/482076"},{"type":"FIX","url":"https://go.dev/cl/482075"},{"type":"FIX","url":"https://go.dev/cl/482077"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/Xdv6JL9ENs8"}],"credits":[{"name":"Jakob Ackermann (@das7pad)"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2023-1705"}},{"schema_version":"1.3.1","id":"GO-2023-1751","modified":"2023-06-12T18:45:41Z","published":"2023-05-05T21:10:20Z","aliases":["CVE-2023-24539"],"summary":"Improper sanitization of CSS values in html/template","details":"Angle brackets (\u003c\u003e) are not considered dangerous characters when inserted into CSS contexts. Templates containing multiple actions separated by a '/' character can result in unexpectedly closing the CSS context and allowing for injection of unexpected HTML, if executed with untrusted input.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.19.9"},{"introduced":"1.20.0-0"},{"fixed":"1.20.4"}]}],"ecosystem_specific":{"imports":[{"path":"html/template","symbols":["Template.Execute","Template.ExecuteTemplate","cssValueFilter","escaper.commit"]}]}}],"references":[{"type":"REPORT","url":"https://go.dev/issue/59720"},{"type":"FIX","url":"https://go.dev/cl/491615"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/MEb0UyuSMsU"}],"credits":[{"name":"Juho Nurminen of Mattermost"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2023-1751"}},{"schema_version":"1.3.1","id":"GO-2023-1752","modified":"2023-06-12T18:45:41Z","published":"2023-05-05T21:10:22Z","aliases":["CVE-2023-24540"],"summary":"Improper handling of JavaScript whitespace in html/template","details":"Not all valid JavaScript whitespace characters are considered to be whitespace. Templates containing whitespace characters outside of the character set \"\\t\\n\\f\\r\\u0020\\u2028\\u2029\" in JavaScript contexts that also contain actions may not be properly sanitized during execution.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.19.9"},{"introduced":"1.20.0-0"},{"fixed":"1.20.4"}]}],"ecosystem_specific":{"imports":[{"path":"html/template","symbols":["Template.Execute","Template.ExecuteTemplate","nextJSCtx"]}]}}],"references":[{"type":"REPORT","url":"https://go.dev/issue/59721"},{"type":"FIX","url":"https://go.dev/cl/491616"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/MEb0UyuSMsU"}],"credits":[{"name":"Juho Nurminen of Mattermost"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2023-1752"}},{"schema_version":"1.3.1","id":"GO-2023-1753","modified":"2023-06-12T18:45:41Z","published":"2023-05-05T21:10:24Z","aliases":["CVE-2023-29400"],"summary":"Improper handling of empty HTML attributes in html/template","details":"Templates containing actions in unquoted HTML attributes (e.g. \"attr={{.}}\") executed with empty input can result in output with unexpected results when parsed due to HTML normalization rules. This may allow injection of arbitrary attributes into tags.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.19.9"},{"introduced":"1.20.0-0"},{"fixed":"1.20.4"}]}],"ecosystem_specific":{"imports":[{"path":"html/template","symbols":["Template.Execute","Template.ExecuteTemplate","appendCmd","htmlNospaceEscaper"]}]}}],"references":[{"type":"REPORT","url":"https://go.dev/issue/59722"},{"type":"FIX","url":"https://go.dev/cl/491617"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/MEb0UyuSMsU"}],"credits":[{"name":"Juho Nurminen of Mattermost"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2023-1753"}},{"schema_version":"1.3.1","id":"GO-2023-1840","modified":"2023-06-12T18:45:41Z","published":"2023-06-08T20:16:06Z","aliases":["CVE-2023-29403"],"summary":"Unsafe behavior in setuid/setgid binaries in runtime","details":"On Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors.\n\nIf a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.19.10"},{"introduced":"1.20.0-0"},{"fixed":"1.20.5"}]}],"ecosystem_specific":{"imports":[{"path":"runtime"}]}}],"references":[{"type":"REPORT","url":"https://go.dev/issue/60272"},{"type":"FIX","url":"https://go.dev/cl/501223"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/q5135a9d924/m/j0ZoAJOHAwAJ"}],"credits":[{"name":"Vincent Dehors from Synacktiv"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2023-1840"}}]