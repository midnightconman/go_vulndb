[{"schema_version":"1.3.1","id":"GO-2020-0014","modified":"2023-04-03T15:57:51Z","published":"2021-04-14T20:04:52Z","aliases":["CVE-2018-17846"],"details":"html.Parse does not properly handle \"select\" tags, which can lead to an infinite loop. If parsing user supplied input, this may be used as a denial of service vector.","affected":[{"package":{"name":"golang.org/x/net","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"0.0.0-20190125091013-d26f9f9a57f3"}]}],"ecosystem_specific":{"imports":[{"path":"golang.org/x/net/html","symbols":["Parse","ParseFragment","inSelectIM","inSelectInTableIM"]}]}}],"references":[{"type":"FIX","url":"https://go-review.googlesource.com/c/137275"},{"type":"FIX","url":"https://go.googlesource.com/net/+/d26f9f9a57f3fab6a695bec0d84433c2c50f8bbf"},{"type":"REPORT","url":"https://go.dev/issue/27842"}],"credits":[{"name":"@tr3ee"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2020-0014"}},{"schema_version":"1.3.1","id":"GO-2021-0078","modified":"2023-04-03T15:57:51Z","published":"2021-04-14T20:04:52Z","aliases":["CVE-2018-17075","GHSA-5p4h-3377-7w67"],"details":"The HTML parser does not properly handle \"in frameset\" insertion mode, and can be made to panic when operating on malformed HTML that contains \u003ctemplate\u003e tags. If operating on user input, this may be a vector for a denial of service attack.","affected":[{"package":{"name":"golang.org/x/net","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"0.0.0-20180816102801-aaf60122140d"}]}],"ecosystem_specific":{"imports":[{"path":"golang.org/x/net/html","symbols":["Parse","ParseFragment","inBodyIM","inFramesetIM"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/123776"},{"type":"FIX","url":"https://go.googlesource.com/net/+/aaf60122140d3fcf75376d319f0554393160eb50"},{"type":"REPORT","url":"https://go.dev/issue/27016"},{"type":"WEB","url":"https://bugs.chromium.org/p/chromium/issues/detail?id=829668"},{"type":"WEB","url":"https://go-review.googlesource.com/c/net/+/94838/9/html/parse.go#1906"}],"credits":[{"name":"Kunpei Sakai"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2021-0078"}},{"schema_version":"1.3.1","id":"GO-2021-0238","modified":"2023-04-03T15:57:51Z","published":"2022-02-17T17:33:43Z","aliases":["CVE-2021-33194","GHSA-83g2-8m93-v3w7"],"details":"An attacker can craft an input to ParseFragment that causes it to enter an infinite loop and never return.","affected":[{"package":{"name":"golang.org/x/net","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"0.0.0-20210520170846-37e1c6afe023"}]}],"ecosystem_specific":{"imports":[{"path":"golang.org/x/net/html","symbols":["Parse","ParseFragment","ParseFragmentWithOptions","ParseWithOptions","inHeadIM"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/311090"},{"type":"FIX","url":"https://go.googlesource.com/net/+/37e1c6afe02340126705deced573a85ab75209d7"},{"type":"REPORT","url":"https://go.dev/issue/46288"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/wPunbCPkWUg"}],"credits":[{"name":"discovered by OSS-Fuzz and reported by Andrew Thornton"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2021-0238"}},{"schema_version":"1.3.1","id":"GO-2022-0192","modified":"2023-04-03T15:57:51Z","published":"2022-07-01T20:11:34Z","aliases":["CVE-2018-17142","GHSA-2wp2-chmh-r934"],"details":"The Parse function can panic on some invalid inputs.\n\nFor example, the Parse function panics on the input \"\u003cmath\u003e\u003ctemplate\u003e\u003cmo\u003e\u003ctemplate\u003e\".","affected":[{"package":{"name":"golang.org/x/net","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"0.0.0-20180925071336-cf3bd585ca2a"}]}],"ecosystem_specific":{"imports":[{"path":"golang.org/x/net/html","symbols":["Parse","ParseFragment","parser.resetInsertionMode"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/136875"},{"type":"FIX","url":"https://go.googlesource.com/net/+/cf3bd585ca2a5a21b057abd8be7eea2204af89d0"},{"type":"REPORT","url":"https://go.dev/issue/27702"}],"credits":[{"name":"@tr3ee"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0192"}},{"schema_version":"1.3.1","id":"GO-2022-0193","modified":"2023-04-03T15:57:51Z","published":"2022-07-06T18:14:54Z","aliases":["CVE-2018-17143","GHSA-fcf9-6fv2-fc5v"],"details":"The Parse function can panic on some invalid inputs.\n\nFor example, the Parse function panics on the input \"\u003ctemplate\u003e\u003ctBody\u003e\u003cisindex/action=0\u003e\".","affected":[{"package":{"name":"golang.org/x/net","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"0.0.0-20180921000356-2f5d2388922f"}]}],"ecosystem_specific":{"imports":[{"path":"golang.org/x/net/html","symbols":["Parse","ParseFragment","inBodyIM"]}]}}],"references":[{"type":"FIX","url":"https://go-review.googlesource.com/c/net/+/136575"},{"type":"FIX","url":"https://go.googlesource.com/net/+/2f5d2388922f370f4355f327fcf4cfe9f5583908"},{"type":"REPORT","url":"https://go.dev/issue/27704"}],"credits":[{"name":"@tr3ee"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0193"}},{"schema_version":"1.3.1","id":"GO-2022-0197","modified":"2023-04-03T15:57:51Z","published":"2022-07-01T20:15:19Z","aliases":["CVE-2018-17847","CVE-2018-17848","GHSA-4r78-hx75-jjj2","GHSA-mv93-wvcp-7m7r"],"details":"The Parse function can panic on some invalid inputs.\n\nFor example, the Parse function panics on the input \"\u003csvg\u003e\u003ctemplate\u003e\u003cdesc\u003e\u003ct\u003e\u003csvg\u003e\u003c/template\u003e\".","affected":[{"package":{"name":"golang.org/x/net","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"0.0.0-20190125002852-4b62a64f59f7"}]}],"ecosystem_specific":{"imports":[{"path":"golang.org/x/net/html","symbols":["Parse","ParseFragment","nodeStack.contains"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/159397"},{"type":"FIX","url":"https://go.googlesource.com/net/+/4b62a64f59f73840b9ab79204c94fee61cd1ba2c"},{"type":"REPORT","url":"https://go.dev/issue/27846"}],"credits":[{"name":"@tr3ee"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0197"}},{"schema_version":"1.3.1","id":"GO-2022-0236","modified":"2023-05-11T15:31:00Z","published":"2022-07-15T23:04:18Z","aliases":["CVE-2021-31525","GHSA-h86h-8ppg-mxmh"],"details":"A malicious HTTP server or client can cause the net/http client or server to panic.\n\nReadRequest and ReadResponse can hit an unrecoverable panic when reading a very large header (over 7MB on 64-bit architectures, or over 4MB on 32-bit ones). Transport and Client are vulnerable and the program can be made to crash by a malicious server. Server is not vulnerable by default, but can be if the default max header of 1MB is overridden by setting Server.MaxHeaderBytes to a higher value, in which case the program can be made to crash by a malicious client.\n\nThis also affects golang.org/x/net/http2/h2c and HeaderValuesContainsToken in golang.org/x/net/http/httpguts.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.15.12"},{"introduced":"1.16.0-0"},{"fixed":"1.16.4"}]}],"ecosystem_specific":{"imports":[{"path":"net/http","symbols":["http2clientStream.writeRequest","http2isConnectionCloseRequest","isProtocolSwitchHeader","shouldClose"]}]}},{"package":{"name":"golang.org/x/net","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"0.0.0-20210428140749-89ef3d95e781"}]}],"ecosystem_specific":{"imports":[{"path":"golang.org/x/net/http/httpguts","symbols":["HeaderValuesContainsToken","headerValueContainsToken"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/313069"},{"type":"FIX","url":"https://go.googlesource.com/net/+/89ef3d95e781148a0951956029c92a211477f7f9"},{"type":"REPORT","url":"https://go.dev/issue/45710"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/cu9SP4eSXMc"}],"credits":[{"name":"Guido Vranken"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0236"}},{"schema_version":"1.3.1","id":"GO-2022-0288","modified":"2023-05-11T15:31:00Z","published":"2022-07-15T23:08:33Z","aliases":["CVE-2021-44716","GHSA-vc3p-29h2-gpcp"],"details":"An attacker can cause unbounded memory growth in servers accepting HTTP/2 requests.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.16.12"},{"introduced":"1.17.0-0"},{"fixed":"1.17.5"}]}],"ecosystem_specific":{"imports":[{"path":"net/http","symbols":["http2serverConn.canonicalHeader"]}]}},{"package":{"name":"golang.org/x/net","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"0.0.0-20211209124913-491a49abca63"}]}],"ecosystem_specific":{"imports":[{"path":"golang.org/x/net/http2","symbols":["Server.ServeConn","serverConn.canonicalHeader"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/369794"},{"type":"REPORT","url":"https://go.dev/issue/50058"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/hcmEScgc00k"}],"credits":[{"name":"murakmii"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0288"}},{"schema_version":"1.3.1","id":"GO-2022-0536","modified":"2023-05-11T15:31:00Z","published":"2022-08-01T22:20:53Z","aliases":["CVE-2019-9512","CVE-2019-9514","GHSA-39qc-96h7-956f","GHSA-hgr8-6h9x-f7q9"],"details":"Some HTTP/2 implementations are vulnerable to a reset flood, potentially leading to a denial of service.\n\nServers that accept direct connections from untrusted clients could be remotely made to allocate an unlimited amount of memory, until the program crashes. The attacker opens a number of streams and sends an invalid request over each stream that should solicit a stream of RST_STREAM frames from the peer. Depending on how the peer queues the RST_STREAM frames, this can consume excess memory, CPU, or both.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.11.13"},{"introduced":"1.12.0-0"},{"fixed":"1.12.8"}]}],"ecosystem_specific":{"imports":[{"path":"net/http","symbols":["http2serverConn.scheduleFrameWrite","http2serverConn.serve","http2serverConn.writeFrame"]}]}},{"package":{"name":"golang.org/x/net","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"0.0.0-20190813141303-74dc4d7220e7"}]}],"ecosystem_specific":{"imports":[{"path":"golang.org/x/net/http","symbols":["serverConn.scheduleFrameWrite","serverConn.serve","serverConn.writeFrame"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/190137"},{"type":"FIX","url":"https://go.googlesource.com/go/+/145e193131eb486077b66009beb051aba07c52a5"},{"type":"REPORT","url":"https://go.dev/issue/33606"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/65QixT3tcmg/m/DrFiG6vvCwAJ"}],"credits":[{"name":"Jonathan Looney of Netflix"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0536"}},{"schema_version":"1.3.1","id":"GO-2022-0969","modified":"2023-05-11T15:31:00Z","published":"2022-09-12T20:23:06Z","aliases":["CVE-2022-27664","GHSA-69cg-p879-7622"],"details":"HTTP/2 server connections can hang forever waiting for a clean shutdown that was preempted by a fatal error. This condition can be exploited by a malicious client to cause a denial of service.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.18.6"},{"introduced":"1.19.0-0"},{"fixed":"1.19.1"}]}],"ecosystem_specific":{"imports":[{"path":"net/http","symbols":["ListenAndServe","ListenAndServeTLS","Serve","ServeTLS","Server.ListenAndServe","Server.ListenAndServeTLS","Server.Serve","Server.ServeTLS","http2Server.ServeConn","http2serverConn.goAway"]}]}},{"package":{"name":"golang.org/x/net","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"0.0.0-20220906165146-f3363e06e74c"}]}],"ecosystem_specific":{"imports":[{"path":"golang.org/x/net/http2","symbols":["Server.ServeConn","serverConn.goAway"]}]}}],"references":[{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/x49AQzIVX-s"},{"type":"REPORT","url":"https://go.dev/issue/54658"},{"type":"FIX","url":"https://go.dev/cl/428735"}],"credits":[{"name":"Bahruz Jabiyev, Tommaso Innocenti, Anthony Gavazzi, Steven Sprecher, and Kaan Onarlioglu"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0969"}},{"schema_version":"1.3.1","id":"GO-2022-1144","modified":"2023-05-11T15:31:00Z","published":"2022-12-08T19:01:21Z","aliases":["CVE-2022-41717","GHSA-xrjj-mj9h-534m"],"details":"An attacker can cause excessive memory growth in a Go server accepting HTTP/2 requests.\n\nHTTP/2 server connections contain a cache of HTTP header keys sent by the client. While the total number of entries in this cache is capped, an attacker sending very large keys can cause the server to allocate approximately 64 MiB per open connection.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.18.9"},{"introduced":"1.19.0-0"},{"fixed":"1.19.4"}]}],"ecosystem_specific":{"imports":[{"path":"net/http","symbols":["ListenAndServe","ListenAndServeTLS","Serve","ServeTLS","Server.ListenAndServe","Server.ListenAndServeTLS","Server.Serve","Server.ServeTLS","http2Server.ServeConn","http2serverConn.canonicalHeader"]}]}},{"package":{"name":"golang.org/x/net","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"0.4.0"}]}],"ecosystem_specific":{"imports":[{"path":"golang.org/x/net/http2","symbols":["Server.ServeConn","serverConn.canonicalHeader"]}]}}],"references":[{"type":"REPORT","url":"https://go.dev/issue/56350"},{"type":"FIX","url":"https://go.dev/cl/455717"},{"type":"FIX","url":"https://go.dev/cl/455635"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/L_3rmdT0BMU/m/yZDrXjIiBQAJ"}],"credits":[{"name":"Josselin Costanzi"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-1144"}},{"schema_version":"1.3.1","id":"GO-2023-1495","modified":"2023-04-03T15:57:51Z","published":"2023-01-13T22:39:40Z","aliases":["CVE-2022-41721","GHSA-fxg5-wq6x-vr4w"],"details":"A request smuggling attack is possible when using MaxBytesHandler.\n\nWhen using MaxBytesHandler, the body of an HTTP request is not fully consumed. When the server attempts to read HTTP2 frames from the connection, it will instead be reading the body of the HTTP request, which could be attacker-manipulated to represent arbitrary HTTP2 requests.","affected":[{"package":{"name":"golang.org/x/net","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0.0.0-20220524220425-1d687d428aca"},{"fixed":"0.1.1-0.20221104162952-702349b0e862"}]}],"ecosystem_specific":{"imports":[{"path":"golang.org/x/net/http2/h2c","symbols":["h2cHandler.ServeHTTP","h2cUpgrade"]}]}}],"references":[{"type":"REPORT","url":"https://go.dev/issue/56352"},{"type":"FIX","url":"https://go.dev/cl/447396"}],"credits":[{"name":"John Howard (Google)"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2023-1495"}},{"schema_version":"1.3.1","id":"GO-2023-1571","modified":"2023-05-11T15:31:00Z","published":"2023-02-16T22:31:36Z","aliases":["CVE-2022-41723","GHSA-vvpx-j8f3-3w6h"],"details":"A maliciously crafted HTTP/2 stream could cause excessive CPU consumption in the HPACK decoder, sufficient to cause a denial of service from a small number of small requests.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.19.6"},{"introduced":"1.20.0-0"},{"fixed":"1.20.1"}]}],"ecosystem_specific":{"imports":[{"path":"net/http","symbols":["Client.Do","Client.Get","Client.Head","Client.Post","Client.PostForm","Get","Head","ListenAndServe","ListenAndServeTLS","Post","PostForm","Serve","ServeTLS","Server.ListenAndServe","Server.ListenAndServeTLS","Server.Serve","Server.ServeTLS","Transport.RoundTrip"]}]}},{"package":{"name":"golang.org/x/net","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"0.7.0"}]}],"ecosystem_specific":{"imports":[{"path":"golang.org/x/net/http2","symbols":["ClientConn.Close","ClientConn.Ping","ClientConn.RoundTrip","ClientConn.Shutdown","ConfigureServer","ConfigureTransport","ConfigureTransports","ConnectionError.Error","ErrCode.String","FrameHeader.String","FrameType.String","FrameWriteRequest.String","Framer.ReadFrame","Framer.WriteContinuation","Framer.WriteData","Framer.WriteDataPadded","Framer.WriteGoAway","Framer.WriteHeaders","Framer.WritePing","Framer.WritePriority","Framer.WritePushPromise","Framer.WriteRSTStream","Framer.WriteRawFrame","Framer.WriteSettings","Framer.WriteSettingsAck","Framer.WriteWindowUpdate","GoAwayError.Error","ReadFrameHeader","Server.ServeConn","Setting.String","SettingID.String","SettingsFrame.ForeachSetting","StreamError.Error","Transport.CloseIdleConnections","Transport.NewClientConn","Transport.RoundTrip","Transport.RoundTripOpt","bufferedWriter.Flush","bufferedWriter.Write","chunkWriter.Write","clientConnPool.GetClientConn","connError.Error","dataBuffer.Read","duplicatePseudoHeaderError.Error","gzipReader.Close","gzipReader.Read","headerFieldNameError.Error","headerFieldValueError.Error","noDialClientConnPool.GetClientConn","noDialH2RoundTripper.RoundTrip","pipe.Read","priorityWriteScheduler.CloseStream","priorityWriteScheduler.OpenStream","pseudoHeaderError.Error","requestBody.Close","requestBody.Read","responseWriter.Flush","responseWriter.FlushError","responseWriter.Push","responseWriter.SetReadDeadline","responseWriter.SetWriteDeadline","responseWriter.Write","responseWriter.WriteHeader","responseWriter.WriteString","serverConn.CloseConn","serverConn.Flush","stickyErrWriter.Write","transportResponseBody.Close","transportResponseBody.Read","writeData.String"]},{"path":"golang.org/x/net/http2/hpack","symbols":["Decoder.DecodeFull","Decoder.Write","Decoder.parseFieldLiteral","Decoder.readString"]}]}}],"references":[{"type":"REPORT","url":"https://go.dev/issue/57855"},{"type":"FIX","url":"https://go.dev/cl/468135"},{"type":"FIX","url":"https://go.dev/cl/468295"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/V0aBFqaFs_E"}],"credits":[{"name":"Philippe Antoine (Catena cyber)"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2023-1571"}}]